.TH "jpcre2.hpp" 3 "Thu Aug 20 2020" "Version 10.32.01" "JPCRE2" \" -*- nroff -*-
.ad l
.nh
.SH NAME
jpcre2.hpp \- Main header file for JPCRE2 library to be included by programs that uses its functionalities\&. It includes the \fCpcre2\&.h\fP header, therefore you shouldn't include \fCpcre2\&.h\fP, neither should you define \fCPCRE2_CODE_UNIT_WIDTH\fP before including \fC\fBjpcre2\&.hpp\fP\fP\&. If your \fCpcre2\&.h\fP header is not in standard include paths, you may include \fCpcre2\&.h\fP with correct path before including \fC\fBjpcre2\&.hpp\fP\fP manually\&. In this case you will have to define \fCPCRE2_CODE_UNIT_WIDTH\fP before including \fCpcre2\&.h\fP\&. Make sure to link required PCRE2 libraries when compiling\&.  

.SH SYNOPSIS
.br
.PP
\fC#include <pcre2\&.h>\fP
.br
\fC#include <string>\fP
.br
\fC#include <vector>\fP
.br
\fC#include <map>\fP
.br
\fC#include <cstdio>\fP
.br
\fC#include <climits>\fP
.br
\fC#include <cstdlib>\fP
.br
\fC#include <utility>\fP
.br
\fC#include <functional>\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBjpcre2::Modifier\fP"
.br
.RI "Class to take a std::string modifier value with null safety\&. "
.ti -1c
.RI "class \fBjpcre2::ModifierTable\fP"
.br
.RI "Lets you create custom modifier tables\&. "
.ti -1c
.RI "struct \fBjpcre2::select< Char_T, Map >\fP"
.br
.RI "struct to select the types\&. "
.ti -1c
.RI "class \fBjpcre2::select< Char_T, Map >::RegexMatch\fP"
.br
.RI "Provides public constructors to create \fBRegexMatch\fP objects\&. "
.ti -1c
.RI "struct \fBjpcre2::select< Char_T, Map >::MatchEvaluatorCallback< T1, T2, T3 >\fP"
.br
.RI "This class contains a typedef of a function pointer or a templated function wrapper (\fCstd::function\fP) to provide callback function to the \fC\fBMatchEvaluator\fP\fP\&. "
.ti -1c
.RI "struct \fBjpcre2::select< Char_T, Map >::callback\fP"
.br
.RI "Provides some default static callback functions\&. "
.ti -1c
.RI "class \fBjpcre2::select< Char_T, Map >::MatchEvaluator\fP"
.br
.RI "This class inherits \fBRegexMatch\fP and provides a similar functionality\&. "
.ti -1c
.RI "class \fBjpcre2::select< Char_T, Map >::RegexReplace\fP"
.br
.RI "Provides public constructors to create \fBRegexReplace\fP objects\&. "
.ti -1c
.RI "class \fBjpcre2::select< Char_T, Map >::Regex\fP"
.br
.RI "Provides public constructors to create \fBRegex\fP object\&. "
.in -1c
.SS "Namespaces"

.in +1c
.ti -1c
.RI " \fBjpcre2\fP"
.br
.ti -1c
.RI " \fBjpcre2::INFO\fP"
.br
.ti -1c
.RI " \fBjpcre2::ERROR\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBPCRE2_CODE_UNIT_WIDTH\fP   0"
.br
.ti -1c
.RI "#define \fBJPCRE2_ASSERT\fP(cond,  msg)   \fBjpcre2::jassert\fP(cond, msg, __FILE__, __LINE__)"
.br
.ti -1c
.RI "#define \fBJPCRE2_VERSION\fP   103201L"
.br
.RI "Define for JPCRE2 version\&. "
.ti -1c
.RI "#define \fBJPCRE2_USE_FUNCTION_POINTER_CALLBACK\fP"
.br
.ti -1c
.RI "#define \fBJPCRE2_NDEBUG\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef PCRE2_SIZE \fBjpcre2::SIZE_T\fP"
.br
.RI "Used for match count and vector size\&. "
.ti -1c
.RI "typedef uint32_t \fBjpcre2::Uint\fP"
.br
.RI "Used for options (bitwise operation) "
.ti -1c
.RI "typedef uint8_t \fBjpcre2::Ush\fP"
.br
.RI "8 bit unsigned integer\&. "
.ti -1c
.RI "typedef std::vector< SIZE_T > \fBjpcre2::VecOff\fP"
.br
.RI "vector of size_t\&. "
.ti -1c
.RI "typedef std::vector< Uint > \fBjpcre2::VecOpt\fP"
.br
.RI "vector for Uint option values\&. "
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum { \fBjpcre2::ERROR::INVALID_MODIFIER\fP = 2, \fBjpcre2::ERROR::INSUFFICIENT_OVECTOR\fP = 3 }"
.br
.RI "Error numbers for JPCRE2\&. "
.ti -1c
.RI "enum { \fBjpcre2::NONE\fP = 0x0000000u, \fBjpcre2::FIND_ALL\fP = 0x0000002u, \fBjpcre2::JIT_COMPILE\fP = 0x0000004u }"
.br
.RI "These constants provide JPCRE2 options\&. "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "static void \fBjpcre2::jassert\fP (bool cond, const char *msg, const char *f, size_t line)"
.br
.RI "JPCRE2 assert function\&. "
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "static const char \fBjpcre2::INFO::NAME\fP [] = 'JPCRE2'"
.br
.RI "Name of the project\&. "
.ti -1c
.RI "static const char \fBjpcre2::INFO::FULL_VERSION\fP [] = '10\&.32\&.01'"
.br
.RI "Full version string\&. "
.ti -1c
.RI "static const char \fBjpcre2::INFO::VERSION_GENRE\fP [] = '10'"
.br
.RI "Generation, depends on original PCRE2 version\&. "
.ti -1c
.RI "static const char \fBjpcre2::INFO::VERSION_MAJOR\fP [] = '32'"
.br
.RI "Major version, updated when API change is made\&. "
.ti -1c
.RI "static const char \fBjpcre2::INFO::VERSION_MINOR\fP [] = '01'"
.br
.RI "Minor version, includes bug fix or minor feature upgrade\&. "
.ti -1c
.RI "static const char \fBjpcre2::INFO::VERSION_PRE_RELEASE\fP [] = ''"
.br
.RI "Alpha or beta (testing) release version\&. "
.in -1c
.SH "Detailed Description"
.PP 
Main header file for JPCRE2 library to be included by programs that uses its functionalities\&. It includes the \fCpcre2\&.h\fP header, therefore you shouldn't include \fCpcre2\&.h\fP, neither should you define \fCPCRE2_CODE_UNIT_WIDTH\fP before including \fC\fBjpcre2\&.hpp\fP\fP\&. If your \fCpcre2\&.h\fP header is not in standard include paths, you may include \fCpcre2\&.h\fP with correct path before including \fC\fBjpcre2\&.hpp\fP\fP manually\&. In this case you will have to define \fCPCRE2_CODE_UNIT_WIDTH\fP before including \fCpcre2\&.h\fP\&. Make sure to link required PCRE2 libraries when compiling\&. 


.PP
\fBAuthor\fP
.RS 4
\fCMd Jahidul Hamid\fP 
.RE
.PP

.SH "Macro Definition Documentation"
.PP 
.SS "#define JPCRE2_ASSERT(cond, msg)   \fBjpcre2::jassert\fP(cond, msg, __FILE__, __LINE__)"
Macro to call \fC\fBjpcre2::jassert()\fP\fP with file path and line number\&. When \fCNDEBUG\fP or \fCJPCRE2_NDEBUG\fP is defined before including this header, this macro will be defined as \fC((void)0)\fP thus eliminating this assertion\&. 
.PP
\fBParameters\fP
.RS 4
\fIcond\fP condtion (boolean) 
.br
\fImsg\fP message 
.RE
.PP

.SS "#define JPCRE2_NDEBUG"
Macro to remove debug codes\&. Using this macro is discouraged even in production mode but provided for completeness\&. You should not use this macro to bypass any error in your program\&. Define this macro before including this header if you want to remove debug codes included in this library\&.
.PP
Using the standard \fCNDEBUG\fP macro will have the same effect, but it is recommended that you use \fCJPCRE2_NDEBUG\fP to strip out debug codes specifically for this library\&. 
.SS "#define JPCRE2_USE_FUNCTION_POINTER_CALLBACK"
Use function pointer in all cases for MatchEvaluatorCallback function\&. By default function pointer is used for callback in MatchEvaluator when using <C++11 compiler, but for \fC>=C++11\fP compiler \fCstd::function\fP instead of function pointer is used\&. If this macro is defined before including \fBjpcre2\&.hpp\fP, function pointer will be used in all cases\&. It you are using lambda function with captures, stick with \fCstd::function\fP, on the other hand, if you are using older compilers, you might want to use function pointer instead\&.
.PP
For example, with gcc-4\&.7, \fCstd::function\fP will give compile error in C++11 mode, in such cases where full C++11 support is not available, use function pointer\&. 
.SS "#define JPCRE2_VERSION   103201L"

.PP
Define for JPCRE2 version\&. It can be used to support changes in different versions of the lib\&. 
.SS "#define PCRE2_CODE_UNIT_WIDTH   0"
This macro does not have any significance in JPCRE2 context\&. It is defined as 0 by default\&. Defining it before including \fBjpcre2\&.hpp\fP will override the default (discouraged as it will make it harder for you to detect problems), but still it will have no effect in a JPCRE2 perspective\&. Defining it with an invalid value will yield to compile error\&. 
.SH "Author"
.PP 
Generated automatically by Doxygen for JPCRE2 from the source code\&.
