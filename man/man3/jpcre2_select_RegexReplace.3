.TH "jpcre2::select< Char_T, BS >::RegexReplace" 3 "Wed Nov 23 2016" "Version 10.28.10" "JPCRE2" \" -*- nroff -*-
.ad l
.nh
.SH NAME
jpcre2::select< Char_T, BS >::RegexReplace \- Provides public constructors to create \fBRegexReplace\fP objects\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <jpcre2\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBRegexReplace\fP ()"
.br
.RI "Default constructor\&. "
.ti -1c
.RI "\fBRegexReplace\fP (\fBRegex\fP *r)"
.br
.RI "This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. "
.ti -1c
.RI "\fBRegexReplace\fP (const \fBRegexReplace\fP &rr)"
.br
.RI "This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. "
.ti -1c
.RI "\fBRegexReplace\fP & \fBoperator=\fP (const \fBRegexReplace\fP &rr)"
.br
.RI "Overloaded Copy assignment operator\&. "
.ti -1c
.RI "\fBRegexReplace\fP & \fBreset\fP ()"
.br
.RI "Reset all class variables to its default (initial) state\&. "
.ti -1c
.RI "\fBRegexReplace\fP & \fBresetErrors\fP ()"
.br
.RI "Reset replace related errors to zero\&. "
.ti -1c
.RI "int \fBgetErrorNumber\fP ()"
.br
.RI "Returns the last error number\&. "
.ti -1c
.RI "int \fBgetErrorOffset\fP ()"
.br
.RI "Returns the last error offset\&. "
.ti -1c
.RI "\fBString\fP \fBgetErrorMessage\fP ()"
.br
.RI "Returns the last error message\&. "
.ti -1c
.RI "\fBString\fP \fBgetReplaceWith\fP ()"
.br
.RI "Get replacement string\&. "
.ti -1c
.RI "const \fBString\fP * \fBgetReplaceWithPointer\fP ()"
.br
.RI "Get pointer to replacement string\&. "
.ti -1c
.RI "\fBString\fP \fBgetSubject\fP ()"
.br
.RI "Get subject string\&. "
.ti -1c
.RI "const \fBString\fP * \fBgetSubjectPointer\fP ()"
.br
.RI "Get pointer to subject string\&. "
.ti -1c
.RI "std::string \fBgetModifier\fP ()"
.br
.RI "Calculate modifier string from PCRE2 and JPCRE2 options and return it\&. "
.ti -1c
.RI "\fBUint\fP \fBgetPcre2Option\fP ()"
.br
.RI "Get PCRE2 option\&. "
.ti -1c
.RI "\fBUint\fP \fBgetJpcre2Option\fP ()"
.br
.RI "Get JPCRE2 option\&. "
.ti -1c
.RI "const \fBRegex\fP * \fBgetRegexObject\fP ()"
.br
.RI "Get a pointer to the associated \fBRegex\fP object\&. "
.ti -1c
.RI "\fBRegexReplace\fP & \fBsetRegexObject\fP (const \fBRegex\fP *r)"
.br
.RI "Set pointer to the associated \fBRegex\fP object\&. "
.ti -1c
.RI "\fBRegexReplace\fP & \fBsetSubject\fP (const \fBString\fP &s)"
.br
.RI "Set the subject string for replace\&. "
.ti -1c
.RI "\fBRegexReplace\fP & \fBsetSubject\fP (const \fBString\fP *s)"
.br
.RI "This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. "
.ti -1c
.RI "\fBRegexReplace\fP & \fBsetReplaceWith\fP (const \fBString\fP &s)"
.br
.RI "Set the replacement string\&. "
.ti -1c
.RI "\fBRegexReplace\fP & \fBsetReplaceWith\fP (const \fBString\fP *s)"
.br
.RI "This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. "
.ti -1c
.RI "\fBRegexReplace\fP & \fBsetModifier\fP (const std::string &s)"
.br
.RI "Set the modifier string (resets all JPCRE2 and PCRE2 options) by calling \fBRegexReplace::changeModifier()\fP\&. "
.ti -1c
.RI "\fBRegexReplace\fP & \fBsetBufferSize\fP (PCRE2_SIZE x)"
.br
.RI "Set the initial buffer size to be allocated for replaced string (used by PCRE2) "
.ti -1c
.RI "\fBRegexReplace\fP & \fBsetJpcre2Option\fP (\fBUint\fP x)"
.br
.RI "Set JPCRE2 option for replace (overwrite existing option) "
.ti -1c
.RI "\fBRegexReplace\fP & \fBsetPcre2Option\fP (\fBUint\fP x)"
.br
.RI "Set PCRE2 option replace (overwrite existing option) "
.ti -1c
.RI "\fBRegexReplace\fP & \fBchangeModifier\fP (const std::string &mod, bool)"
.br
.RI "After a call to this function PCRE2 and JPCRE2 options will be properly set\&. "
.ti -1c
.RI "\fBRegexReplace\fP & \fBchangeJpcre2Option\fP (\fBUint\fP opt, bool x)"
.br
.RI "Parse modifier and add/remove equivalent PCRE2 and JPCRE2 options\&. "
.ti -1c
.RI "\fBRegexReplace\fP & \fBchangePcre2Option\fP (\fBUint\fP opt, bool x)"
.br
.RI "Add or remove a PCRE2 option\&. "
.ti -1c
.RI "\fBRegexReplace\fP & \fBaddModifier\fP (const std::string &mod)"
.br
.RI "Parse modifier string and add equivalent PCRE2 and JPCRE2 options\&. "
.ti -1c
.RI "\fBRegexReplace\fP & \fBaddJpcre2Option\fP (\fBUint\fP x)"
.br
.RI "Add specified JPCRE2 option to existing options for replace\&. "
.ti -1c
.RI "\fBRegexReplace\fP & \fBaddPcre2Option\fP (\fBUint\fP x)"
.br
.RI "Add specified PCRE2 option to existing options for replace\&. "
.ti -1c
.RI "\fBString\fP \fBreplace\fP (void)"
.br
.RI "Perform regex replace by retrieving subject string, replacement string, modifier and other options from class variables\&. "
.ti -1c
.RI "\fBString\fP \fBreplace\fP (const \fBString\fP &mains)"
.br
.RI "This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. "
.ti -1c
.RI "\fBString\fP \fBreplace\fP (const \fBString\fP *mains)"
.br
.RI "This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. "
.ti -1c
.RI "\fBString\fP \fBreplace\fP (const \fBString\fP &mains, const \fBString\fP &repl)"
.br
.RI "This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. "
.ti -1c
.RI "\fBString\fP \fBreplace\fP (const \fBString\fP *mains, const \fBString\fP &repl)"
.br
.RI "This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. "
.ti -1c
.RI "\fBString\fP \fBreplace\fP (const \fBString\fP &mains, const \fBString\fP *repl)"
.br
.RI "This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. "
.ti -1c
.RI "\fBString\fP \fBreplace\fP (const \fBString\fP *mains, const \fBString\fP *repl)"
.br
.RI "This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. "
.ti -1c
.RI "\fBString\fP \fBreplace\fP (const \fBString\fP &mains, const \fBString\fP &repl, const std::string &mod)"
.br
.RI "This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. "
.ti -1c
.RI "\fBString\fP \fBreplace\fP (const \fBString\fP *mains, const \fBString\fP &repl, const std::string &mod)"
.br
.RI "This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. "
.ti -1c
.RI "\fBString\fP \fBreplace\fP (const \fBString\fP &mains, const \fBString\fP *repl, const std::string &mod)"
.br
.RI "This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. "
.ti -1c
.RI "\fBString\fP \fBreplace\fP (const \fBString\fP *mains, const \fBString\fP *repl, const std::string &mod)"
.br
.RI "This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT>
.br
class jpcre2::select< Char_T, BS >::RegexReplace"
Provides public constructors to create \fBRegexReplace\fP objects\&. 

Every \fBRegexReplace\fP object should be associated with a \fBRegex\fP object\&. This class stores a pointer to its' associated \fBRegex\fP object, thus when the content of the associated \fBRegex\fP object is changed, there's no need to set the pointer again\&.
.PP
Examples:
.PP
.PP
.nf
Regex re;
RegexReplace rr;
rr\&.setRegexObject(&re);
rr\&.replace("subject", "me");  // returns 'subject'
re\&.compile("\\w+");
rr\&.replace();  // replaces 'subject' with 'me' i\&.e returns 'me'
.fi
.PP
 
.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBjpcre2::select\fP< Char_T, BS >::RegexReplace::RegexReplace ()\fC [inline]\fP"

.PP
Default constructor\&. 
.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBjpcre2::select\fP< Char_T, BS >::RegexReplace::RegexReplace (\fBRegex\fP * r)\fC [inline]\fP"

.PP
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. Creates a \fBRegexReplace\fP object associating a \fBRegex\fP object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIr\fP pointer to a \fBRegex\fP object 
.RE
.PP

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBjpcre2::select\fP< Char_T, BS >::RegexReplace::RegexReplace (const \fBRegexReplace\fP & rr)\fC [inline]\fP"

.PP
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. Copy constructor. Performs a deep copy\&. 
.PP
\fBParameters:\fP
.RS 4
\fIrr\fP \fBRegexReplace\fP object reference 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBRegexReplace\fP& \fBjpcre2::select\fP< Char_T, BS >::RegexReplace::addJpcre2Option (\fBUint\fP x)\fC [inline]\fP"

.PP
Add specified JPCRE2 option to existing options for replace\&. 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP Option value 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to the calling \fBRegexReplace\fP object 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBRegexMatch::addJpcre2Option()\fP 
.PP
\fBRegex::addJpcre2Option()\fP 
.RE
.PP

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBRegexReplace\fP& \fBjpcre2::select\fP< Char_T, BS >::RegexReplace::addModifier (const std::string & mod)\fC [inline]\fP"

.PP
Parse modifier string and add equivalent PCRE2 and JPCRE2 options\&. This is just a wrapper of the original function \fBRegexReplace::changeModifier()\fP provided for convenience\&.
.PP
\fBNote:\fP If speed of operation is very crucial, use \fBRegexReplace::addJpcre2Option()\fP and \fBRegexReplace::addPcre2Option()\fP with equivalent options\&. It will be faster that way\&. 
.PP
\fBParameters:\fP
.RS 4
\fImod\fP Modifier string 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to the calling \fBRegexReplace\fP object 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBRegexMatch::addModifier()\fP 
.PP
\fBRegex::addModifier()\fP 
.RE
.PP

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBRegexReplace\fP& \fBjpcre2::select\fP< Char_T, BS >::RegexReplace::addPcre2Option (\fBUint\fP x)\fC [inline]\fP"

.PP
Add specified PCRE2 option to existing options for replace\&. 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP Option value 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to the calling \fBRegexReplace\fP object 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBRegexMatch::addPcre2Option()\fP 
.PP
\fBRegex::addPcre2Option()\fP 
.RE
.PP

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBRegexReplace\fP& \fBjpcre2::select\fP< Char_T, BS >::RegexReplace::changeJpcre2Option (\fBUint\fP opt, bool x)\fC [inline]\fP"

.PP
Parse modifier and add/remove equivalent PCRE2 and JPCRE2 options\&. Add or remove a JPCRE2 option 
.PP
\fBParameters:\fP
.RS 4
\fIopt\fP JPCRE2 option value 
.br
\fIx\fP Add the option if it's true, remove otherwise\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to the calling \fBRegexReplace\fP object 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBRegexMatch::changeJpcre2Option()\fP 
.PP
\fBRegex::changeJpcre2Option()\fP 
.RE
.PP

.SS "template<typename Char_T , jpcre2::Ush BS> \fBjpcre2::select\fP< Char_T, BS >::\fBRegexReplace\fP & \fBjpcre2::select\fP< Char_T, BS >::RegexReplace::changeModifier (const std::string & mod, bool x)"

.PP
After a call to this function PCRE2 and JPCRE2 options will be properly set\&. This function does not initialize or re-initialize options\&. If you want to set options from scratch, initialize them to 0 before calling this function\&.
.PP
\fBNote:\fP If speed of operation is very crucial, use \fBRegexReplace::changeJpcre2Option()\fP and \fBRegexReplace::changePcre2Option()\fP with equivalent options\&. It will be faster that way\&.
.PP
If invalid modifier is detected, then the error number for the \fBRegexReplace\fP object will be \fBjpcre2::ERROR::INVALID_MODIFIER\fP and error offset will be the modifier character\&. You can get the message with \fBRegexReplace::getErrorMessage()\fP function\&. 
.PP
\fBParameters:\fP
.RS 4
\fImod\fP Modifier string 
.br
\fIx\fP Whether to add or remove option 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to the \fBRegexReplace\fP object 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBRegex::changeModifier()\fP 
.PP
\fBRegexMatch::changeModifier()\fP 
.RE
.PP

.PP
Referenced by jpcre2::select< Char_T, BS >::Regex::compile()\&.
.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBRegexReplace\fP& \fBjpcre2::select\fP< Char_T, BS >::RegexReplace::changePcre2Option (\fBUint\fP opt, bool x)\fC [inline]\fP"

.PP
Add or remove a PCRE2 option\&. 
.PP
\fBParameters:\fP
.RS 4
\fIopt\fP PCRE2 option value 
.br
\fIx\fP Add the option if it's true, remove otherwise\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to the calling \fBRegexReplace\fP object 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBRegexMatch::changePcre2Option()\fP 
.PP
\fBRegex::changePcre2Option()\fP 
.RE
.PP

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBString\fP \fBjpcre2::select\fP< Char_T, BS >::RegexReplace::getErrorMessage ()\fC [inline]\fP"

.PP
Returns the last error message\&. 
.PP
\fBReturns:\fP
.RS 4
Last error message 
.RE
.PP

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> int \fBjpcre2::select\fP< Char_T, BS >::RegexReplace::getErrorNumber ()\fC [inline]\fP"

.PP
Returns the last error number\&. 
.PP
\fBReturns:\fP
.RS 4
Last error number 
.RE
.PP

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> int \fBjpcre2::select\fP< Char_T, BS >::RegexReplace::getErrorOffset ()\fC [inline]\fP"

.PP
Returns the last error offset\&. 
.PP
\fBReturns:\fP
.RS 4
Last error offset 
.RE
.PP

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBUint\fP \fBjpcre2::select\fP< Char_T, BS >::RegexReplace::getJpcre2Option ()\fC [inline]\fP"

.PP
Get JPCRE2 option\&. 
.PP
\fBReturns:\fP
.RS 4
JPCRE2 option for replace 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBRegex::getJpcre2Option()\fP 
.PP
\fBRegexMatch::getJpcre2Option()\fP 
.RE
.PP

.SS "template<typename Char_T , jpcre2::Ush BS> std::string \fBjpcre2::select\fP< Char_T, BS >::RegexReplace::getModifier ()"

.PP
Calculate modifier string from PCRE2 and JPCRE2 options and return it\&. Do remember that modifiers (or PCRE2 and JPCRE2 options) do not change or get initialized as long as you don't do that explicitly\&. Calling \fBRegexReplace::setModifier()\fP will re-set them\&.
.PP
\fBMixed or combined modifier\fP\&.
.PP
Some modifier may include other modifiers i\&.e they have the same meaning of some modifiers combined together\&. For example, the 'n' modifier includes the 'u' modifier and together they are equivalent to \fCPCRE2_UTF | PCRE2_UCP\fP\&. When you set a modifier like this, both options get set, and when you remove the 'n' modifier (with \fC\fBRegexReplace::changeModifier()\fP\fP), both will get removed\&. 
.PP
\fBReturns:\fP
.RS 4
Calculated modifier string (std::string) 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBRegexMatch::getModifier()\fP 
.PP
\fBRegex::getModifier()\fP 
.RE
.PP

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBUint\fP \fBjpcre2::select\fP< Char_T, BS >::RegexReplace::getPcre2Option ()\fC [inline]\fP"

.PP
Get PCRE2 option\&. 
.PP
\fBReturns:\fP
.RS 4
PCRE2 option for replace 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBRegex::getPcre2Option()\fP 
.PP
\fBRegexMatch::getPcre2Option()\fP 
.RE
.PP

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> const \fBRegex\fP* \fBjpcre2::select\fP< Char_T, BS >::RegexReplace::getRegexObject ()\fC [inline]\fP"

.PP
Get a pointer to the associated \fBRegex\fP object\&. If no actual \fBRegex\fP object is associated, null is returned 
.PP
\fBReturns:\fP
.RS 4
A pointer to the associated \fBRegex\fP object or null 
.RE
.PP

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBString\fP \fBjpcre2::select\fP< Char_T, BS >::RegexReplace::getReplaceWith ()\fC [inline]\fP"

.PP
Get replacement string\&. 
.PP
\fBReturns:\fP
.RS 4
replacement string 
.RE
.PP

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> const \fBString\fP* \fBjpcre2::select\fP< Char_T, BS >::RegexReplace::getReplaceWithPointer ()\fC [inline]\fP"

.PP
Get pointer to replacement string\&. 
.PP
\fBReturns:\fP
.RS 4
pointer to replacement string 
.RE
.PP

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBString\fP \fBjpcre2::select\fP< Char_T, BS >::RegexReplace::getSubject ()\fC [inline]\fP"

.PP
Get subject string\&. 
.PP
\fBReturns:\fP
.RS 4
subject string 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBRegexMatch::getSubject()\fP 
.RE
.PP

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> const \fBString\fP* \fBjpcre2::select\fP< Char_T, BS >::RegexReplace::getSubjectPointer ()\fC [inline]\fP"

.PP
Get pointer to subject string\&. 
.PP
\fBReturns:\fP
.RS 4
Pointer to subject string 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBRegexMatch::getSubjectPointer()\fP 
.RE
.PP

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBRegexReplace\fP& \fBjpcre2::select\fP< Char_T, BS >::RegexReplace::operator= (const \fBRegexReplace\fP & rr)\fC [inline]\fP"

.PP
Overloaded Copy assignment operator\&. Allows object assignment like this: 
.PP
.nf
RegexReplace rr;
rr = RegexReplace(&re);

.fi
.PP
 
.PP
\fBParameters:\fP
.RS 4
\fIrr\fP \fBRegexReplace\fP object reference 
.RE
.PP
\fBReturns:\fP
.RS 4
A reference to the calling \fBRegexReplace\fP object 
.RE
.PP

.SS "template<typename Char_T , jpcre2::Ush BS> \fBjpcre2::select\fP< Char_T, BS >::\fBString\fP \fBjpcre2::select\fP< Char_T, BS >::RegexReplace::replace (void)"

.PP
Perform regex replace by retrieving subject string, replacement string, modifier and other options from class variables\&. In the replacement string (see \fBRegexReplace::setReplaceWith()\fP) \fC$\fP is a special character which implies captured group\&.
.IP "1." 4
A numbered substring can be referenced with \fC$n\fP or \fC${n}\fP where n is the group number\&.
.IP "2." 4
A named substring can be referenced with \fC${name}\fP, where 'name' is the group name\&.
.IP "3." 4
A literal \fC$\fP can be given as \fC$$\fP\&.
.PP
.PP
Note: This function calls pcre2_substitute() to do the replacement\&. 
.PP
\fBReturns:\fP
.RS 4
Replaced string 
.RE
.PP

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBString\fP \fBjpcre2::select\fP< Char_T, BS >::RegexReplace::replace (const \fBString\fP & mains)\fC [inline]\fP"

.PP
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. Overwrites the subject before replace\&. 
.PP
\fBParameters:\fP
.RS 4
\fImains\fP Subject string 
.RE
.PP
\fBReturns:\fP
.RS 4
replaced string 
.RE
.PP

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBString\fP \fBjpcre2::select\fP< Char_T, BS >::RegexReplace::replace (const \fBString\fP * mains)\fC [inline]\fP"

.PP
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. Overwrites pointer to the subject before replace\&. 
.PP
\fBParameters:\fP
.RS 4
\fImains\fP Pointer to subject string 
.RE
.PP
\fBReturns:\fP
.RS 4
replaced string 
.RE
.PP

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBString\fP \fBjpcre2::select\fP< Char_T, BS >::RegexReplace::replace (const \fBString\fP & mains, const \fBString\fP & repl)\fC [inline]\fP"

.PP
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. Overwrites the subject and replacement string 
.PP
\fBParameters:\fP
.RS 4
\fImains\fP Subject string 
.br
\fIrepl\fP Replacement string 
.RE
.PP
\fBReturns:\fP
.RS 4
replaced string 
.RE
.PP

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBString\fP \fBjpcre2::select\fP< Char_T, BS >::RegexReplace::replace (const \fBString\fP * mains, const \fBString\fP & repl)\fC [inline]\fP"

.PP
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. Overwrites replacement string and pointer to the subject string 
.PP
\fBParameters:\fP
.RS 4
\fImains\fP Pointer to subject string 
.br
\fIrepl\fP Replacement string 
.RE
.PP
\fBReturns:\fP
.RS 4
replaced string 
.RE
.PP

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBString\fP \fBjpcre2::select\fP< Char_T, BS >::RegexReplace::replace (const \fBString\fP & mains, const \fBString\fP * repl)\fC [inline]\fP"

.PP
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. Overwrites the subject string and pointer to replacement string 
.PP
\fBParameters:\fP
.RS 4
\fImains\fP Subject string 
.br
\fIrepl\fP Pointer to replacement string 
.RE
.PP
\fBReturns:\fP
.RS 4
replaced string 
.RE
.PP

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBString\fP \fBjpcre2::select\fP< Char_T, BS >::RegexReplace::replace (const \fBString\fP * mains, const \fBString\fP * repl)\fC [inline]\fP"

.PP
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. Overwrites pointer to replacement and the subject string 
.PP
\fBParameters:\fP
.RS 4
\fImains\fP Pointer to subject string 
.br
\fIrepl\fP Pointer to replacement string 
.RE
.PP
\fBReturns:\fP
.RS 4
replaced string 
.RE
.PP

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBString\fP \fBjpcre2::select\fP< Char_T, BS >::RegexReplace::replace (const \fBString\fP & mains, const \fBString\fP & repl, const std::string & mod)\fC [inline]\fP"

.PP
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. 
.IP "\(bu" 2
Resets all JPCRE2 and PCRE2 options and resets them according to new modifier string\&.
.IP "\(bu" 2
Overwrites the subject and replacement string
.PP
.PP
\fBParameters:\fP
.RS 4
\fImains\fP Subject string 
.br
\fIrepl\fP Replacement string 
.br
\fImod\fP Modifier string 
.RE
.PP
\fBReturns:\fP
.RS 4
replaced string 
.RE
.PP

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBString\fP \fBjpcre2::select\fP< Char_T, BS >::RegexReplace::replace (const \fBString\fP * mains, const \fBString\fP & repl, const std::string & mod)\fC [inline]\fP"

.PP
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. 
.PP
\fBParameters:\fP
.RS 4
\fImains\fP Pointer to subject string 
.br
\fIrepl\fP Replacement string 
.br
\fImod\fP Modifier string 
.RE
.PP
\fBReturns:\fP
.RS 4
replaced string 
.RE
.PP

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBString\fP \fBjpcre2::select\fP< Char_T, BS >::RegexReplace::replace (const \fBString\fP & mains, const \fBString\fP * repl, const std::string & mod)\fC [inline]\fP"

.PP
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. 
.PP
\fBParameters:\fP
.RS 4
\fImains\fP Subject string 
.br
\fIrepl\fP Pointer to replacement string 
.br
\fImod\fP Modifier string 
.RE
.PP
\fBReturns:\fP
.RS 4
replaced string 
.RE
.PP

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBString\fP \fBjpcre2::select\fP< Char_T, BS >::RegexReplace::replace (const \fBString\fP * mains, const \fBString\fP * repl, const std::string & mod)\fC [inline]\fP"

.PP
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. 
.PP
\fBParameters:\fP
.RS 4
\fImains\fP Pointer to subject string 
.br
\fIrepl\fP Pointer to replacement string 
.br
\fImod\fP Modifier string 
.RE
.PP
\fBReturns:\fP
.RS 4
replaced string 
.RE
.PP

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBRegexReplace\fP& \fBjpcre2::select\fP< Char_T, BS >::RegexReplace::reset ()\fC [inline]\fP"

.PP
Reset all class variables to its default (initial) state\&. 
.PP
\fBReturns:\fP
.RS 4
Reference to the calling \fBRegexReplace\fP object\&. 
.RE
.PP

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBRegexReplace\fP& \fBjpcre2::select\fP< Char_T, BS >::RegexReplace::resetErrors ()\fC [inline]\fP"

.PP
Reset replace related errors to zero\&. If you want to examine the error status of a function call in the method chain, add this function just before your target function so that the error is set to zero before that target function is called, and leave everything out after the target function so that there will be no additional errors from other function calls\&. 
.PP
\fBReturns:\fP
.RS 4
Reference to the calling \fBRegexReplace\fP object 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBRegex::resetErrors()\fP 
.PP
\fBRegexMatch::resetErrors()\fP 
.RE
.PP

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBRegexReplace\fP& \fBjpcre2::select\fP< Char_T, BS >::RegexReplace::setBufferSize (PCRE2_SIZE x)\fC [inline]\fP"

.PP
Set the initial buffer size to be allocated for replaced string (used by PCRE2) 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP Buffer size 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to the calling \fBRegexReplace\fP object 
.RE
.PP

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBRegexReplace\fP& \fBjpcre2::select\fP< Char_T, BS >::RegexReplace::setJpcre2Option (\fBUint\fP x)\fC [inline]\fP"

.PP
Set JPCRE2 option for replace (overwrite existing option) 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP Option value 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to the calling \fBRegexReplace\fP object 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBRegexMatch::setJpcre2Option()\fP 
.PP
\fBRegex::setJpcre2Option()\fP 
.RE
.PP

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBRegexReplace\fP& \fBjpcre2::select\fP< Char_T, BS >::RegexReplace::setModifier (const std::string & s)\fC [inline]\fP"

.PP
Set the modifier string (resets all JPCRE2 and PCRE2 options) by calling \fBRegexReplace::changeModifier()\fP\&. \fBNote:\fP If speed of operation is very crucial, use \fBRegexReplace::setJpcre2Option()\fP and \fBRegexReplace::setPcre2Option()\fP with equivalent options\&. It will be faster that way\&. 
.PP
\fBParameters:\fP
.RS 4
\fIs\fP Modifier string 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to the calling \fBRegexReplace\fP object 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBRegexMatch::setModifier()\fP 
.PP
\fBRegex::setModifier()\fP 
.RE
.PP

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBRegexReplace\fP& \fBjpcre2::select\fP< Char_T, BS >::RegexReplace::setPcre2Option (\fBUint\fP x)\fC [inline]\fP"

.PP
Set PCRE2 option replace (overwrite existing option) 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP Option value 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to the calling \fBRegexReplace\fP object 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBRegexMatch::setPcre2Option()\fP 
.PP
\fBRegex::setPcre2Option()\fP 
.RE
.PP

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBRegexReplace\fP& \fBjpcre2::select\fP< Char_T, BS >::RegexReplace::setRegexObject (const \fBRegex\fP * r)\fC [inline]\fP"

.PP
Set pointer to the associated \fBRegex\fP object\&. 
.PP
\fBParameters:\fP
.RS 4
\fIr\fP Pointer to a \fBRegex\fP object\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to the calling \fBRegexReplace\fP object\&. 
.RE
.PP

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBRegexReplace\fP& \fBjpcre2::select\fP< Char_T, BS >::RegexReplace::setReplaceWith (const \fBString\fP & s)\fC [inline]\fP"

.PP
Set the replacement string\&. \fC$\fP is a special character which implies captured group\&.
.PP
.IP "1." 4
A numbered substring can be referenced with \fC$n\fP or \fC${n}\fP where n is the group number\&.
.IP "2." 4
A named substring can be referenced with \fC${name}\fP, where 'name' is the group name\&.
.IP "3." 4
A literal \fC$\fP can be given as \fC$$\fP\&.
.PP
.PP
\fBNote:\fP This function makes a copy of the string\&. If no copy is desired or you are working with big text, consider passing the string with pointer\&.
.PP
\fBParameters:\fP
.RS 4
\fIs\fP String to replace with 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to the calling \fBRegexReplace\fP object 
.RE
.PP

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBRegexReplace\fP& \fBjpcre2::select\fP< Char_T, BS >::RegexReplace::setReplaceWith (const \fBString\fP * s)\fC [inline]\fP"

.PP
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. 
.PP
\fBParameters:\fP
.RS 4
\fIs\fP Pointer to the string to replace with 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to the calling \fBRegexReplace\fP object 
.RE
.PP

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBRegexReplace\fP& \fBjpcre2::select\fP< Char_T, BS >::RegexReplace::setSubject (const \fBString\fP & s)\fC [inline]\fP"

.PP
Set the subject string for replace\&. This makes a copy of the string\&. If no copy is desired or you are working with big text, consider passing pointer to the subject string\&. 
.PP
\fBParameters:\fP
.RS 4
\fIs\fP Subject string 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to the calling \fBRegexReplace\fP object 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBRegexMatch::setSubject()\fP 
.RE
.PP

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBRegexReplace\fP& \fBjpcre2::select\fP< Char_T, BS >::RegexReplace::setSubject (const \fBString\fP * s)\fC [inline]\fP"

.PP
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. Set pointer to the subject string for replace 
.PP
\fBParameters:\fP
.RS 4
\fIs\fP Pointer to subject string 
.RE
.PP
\fBReturns:\fP
.RS 4
Reference to the calling \fBRegexReplace\fP object 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBRegexMatch::setSubject()\fP 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for JPCRE2 from the source code\&.
