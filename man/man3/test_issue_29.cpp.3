.TH "test_issue_29.cpp" 3 "Thu Aug 20 2020" "Version 10.32.01" "JPCRE2" \" -*- nroff -*-
.ad l
.nh
.SH NAME
test_issue_29.cpp
.SH SYNOPSIS
.br
.PP
\fC#include <cassert>\fP
.br
\fC#include <iostream>\fP
.br
\fC#include 'jpcre2\&.hpp'\fP
.br

.SH "Detailed Description"
.PP 
Test cases for \fCissue 29 on Github\fP 
.PP
.nf

#include <cassert>
#include <iostream>
#include "jpcre2\&.hpp"

typedef jpcre2::select<char> jp;

void test_match(jp::Regex &re, std::string const &subject) {
    jp::RegexMatch rm;
    jp::VecNum matches;
    bool out_of_range_occured = false;
    size_t num = rm
        \&.setRegexObject(&re)
        \&.setNumberedSubstringVector(&matches)
        \&.setSubject(subject)
        \&.match();
    assert(num > 0);
    assert(matches[0][1] != "dummy"); // idx 1 should be accessible
    assert(matches[0][2] != "dummy"); // idx 2 should be accessible
    assert(matches[0][3] != "dummy"); // idx 3 should be accessible
    try{
        assert(matches[0]\&.at(4) != "dummy"); // idx 4 should not be accessible
    } catch(std::out_of_range const & e){
        out_of_range_occured = true;
    }
    
    if(!out_of_range_occured){
        std::cout<<"E: std::out_of_range exception was not thrown\&. vecnum has more capture groups than expected\&.\n";
        exit(1);
    }
}

int main(){
    // check with a regex pattern with 3 capture groups
    jp::Regex re("^(\\d+)([abc])?([XYZ])?$");

    test_match(re, "42bZ");
    test_match(re, "23Z");
    test_match(re, "54b");
    test_match(re, "13");

    return 0;
}

.fi
.PP
 
.PP
\fBAuthor\fP
.RS 4
\fCMd Jahidul Hamid\fP 
.PP
\fCMoritz Bunkus\fP 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for JPCRE2 from the source code\&.
