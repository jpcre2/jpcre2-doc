.TH "jpcre2::select< Char_T, Map >" 3 "Sat Apr 11 2020" "Version 10.31.04" "JPCRE2" \" -*- nroff -*-
.ad l
.nh
.SH NAME
jpcre2::select< Char_T, Map > \- struct to select the types\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <jpcre2\&.hpp>\fP
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBcallback\fP"
.br
.RI "Provides some default static callback functions\&. "
.ti -1c
.RI "class \fBMatchEvaluator\fP"
.br
.RI "This class inherits \fBRegexMatch\fP and provides a similar functionality\&. "
.ti -1c
.RI "struct \fBMatchEvaluatorCallback\fP"
.br
.RI "This class contains a typedef of a function pointer or a templated function wrapper (\fCstd::function\fP) to provide callback function to the \fC\fBMatchEvaluator\fP\fP\&. "
.ti -1c
.RI "class \fBRegex\fP"
.br
.RI "Provides public constructors to create \fBRegex\fP object\&. "
.ti -1c
.RI "class \fBRegexMatch\fP"
.br
.RI "Provides public constructors to create \fBRegexMatch\fP objects\&. "
.ti -1c
.RI "class \fBRegexReplace\fP"
.br
.RI "Provides public constructors to create \fBRegexReplace\fP objects\&. "
.in -1c
.SS "Public Types"

.in +1c
.ti -1c
.RI "typedef Char_T \fBChar\fP"
.br
.RI "Typedef for character (\fCchar\fP, \fCwchar_t\fP, \fCchar16_t\fP, \fCchar32_t\fP) "
.ti -1c
.RI "typedef std::basic_string< Char_T > \fBString\fP"
.br
.RI "Typedef for string (\fCstd::string\fP, \fCstd::wstring\fP, \fCstd::u16string\fP, \fCstd::u32string\fP)\&. "
.ti -1c
.RI "typedef class Map< \fBString\fP, \fBString\fP > \fBMapNas\fP"
.br
.RI "Map for Named substrings\&. "
.ti -1c
.RI "typedef class Map< \fBString\fP, \fBSIZE_T\fP > \fBMapNtN\fP"
.br
.RI "Substring name to Substring number map\&. "
.ti -1c
.RI "typedef \fBMapNtN\fP \fBMapNtn\fP"
.br
.RI "Allow spelling mistake of MapNtN as MapNtn\&. "
.ti -1c
.RI "typedef std::vector< \fBString\fP > \fBNumSub\fP"
.br
.RI "Vector for Numbered substrings (Sub container)\&. "
.ti -1c
.RI "typedef std::vector< \fBMapNas\fP > \fBVecNas\fP"
.br
.RI "Vector of matches with named substrings\&. "
.ti -1c
.RI "typedef std::vector< \fBMapNtN\fP > \fBVecNtN\fP"
.br
.RI "Vector of substring name to substring number map\&. 
.br
 "
.ti -1c
.RI "typedef \fBVecNtN\fP \fBVecNtn\fP"
.br
.RI "Allow spelling mistake of VecNtN as VecNtn\&. 
.br
 "
.ti -1c
.RI "typedef std::vector< \fBNumSub\fP > \fBVecNum\fP"
.br
.RI "Vector of matches with numbered substrings\&. 
.br
 "
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBString\fP \fBtoString\fP (\fBChar\fP a)"
.br
.RI "Converts a Char_T to \fBjpcre2::select::String\fP\&. "
.ti -1c
.RI "static \fBString\fP \fBtoString\fP (\fBChar\fP const *a)"
.br
.RI "This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. \&.\&.\&. "
.ti -1c
.RI "static \fBString\fP \fBtoString\fP (\fBChar\fP *a)"
.br
.RI "This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. \&.\&.\&. "
.ti -1c
.RI "static \fBString\fP \fBtoString\fP (Pcre2Uchar *a)"
.br
.RI "This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. \&.\&.\&. "
.ti -1c
.RI "static \fBString\fP \fBgetPcre2ErrorMessage\fP (int err_num)"
.br
.RI "Retruns error message from PCRE2 error number\&. "
.ti -1c
.RI "static \fBString\fP \fBgetErrorMessage\fP (int err_num, int err_off)"
.br
.RI "Returns error message (either JPCRE2 or PCRE2) from error number and error offset\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename Char_T, template< typename\&.\&.\&. > class Map = std::map>
.br
struct jpcre2::select< Char_T, Map >"
struct to select the types\&. 


.PP
\fBTemplate Parameters\fP
.RS 4
\fIChar_T\fP Character type (\fCchar\fP, \fCwchar_t\fP, \fCchar16_t\fP, \fCchar32_t\fP) 
.br
\fIMap\fP Optional parameter (Only \fC>= C++11\fP) to specify a map container (\fCstd::map\fP, \fCstd::unordered_map\fP etc\&.\&.)\&. Default is \fCstd::map\fP\&.
.RE
.PP
The character type (\fCChar_T\fP) must be in accordance with the PCRE2 library you are linking against\&. If not sure which library you need, link against all 3 PCRE2 libraries and they will be used as needed\&.
.PP
If you want to be specific, then here's the rule:
.PP
.IP "1." 4
If \fCChar_T\fP is 8 bit, you need 8 bit PCRE2 library
.IP "2." 4
If \fCChar_T\fP is 16 bit, you need 16 bit PCRE2 library
.IP "3." 4
If \fCChar_T\fP is 32 bit, you need 32 bit PCRE2 library
.IP "4." 4
if \fCChar_T\fP is not 8 or 16 or 32 bit, you will get compile error\&.
.PP
.PP
In \fC>= C++11\fP you get an additional optional template parameter to specify a map container\&. For example, you can use \fCstd::unordered_map\fP instead of the default \fCstd::map\fP: 
.PP
.nf
#include <unordered_map>
typedef jpcre2::select<char, std::unordered_map> jp;

.fi
.PP
.PP
We will use the following typedef throughout this doc: 
.PP
.nf
typedef jpcre2::select<Char_T> jp;

.fi
.PP
 
.SH "Member Typedef Documentation"
.PP 
.SS "template<typename Char_T , template< typename\&.\&.\&. > class Map = std::map> typedef Char_T \fBjpcre2::select\fP< Char_T, Map >::\fBChar\fP"

.PP
Typedef for character (\fCchar\fP, \fCwchar_t\fP, \fCchar16_t\fP, \fCchar32_t\fP) 
.SS "template<typename Char_T , template< typename\&.\&.\&. > class Map = std::map> typedef class Map< \fBString\fP, \fBString\fP > \fBjpcre2::select\fP< Char_T, Map >::\fBMapNas\fP"

.PP
Map for Named substrings\&. 
.SS "template<typename Char_T , template< typename\&.\&.\&. > class Map = std::map> typedef class Map< \fBString\fP, \fBSIZE_T\fP > \fBjpcre2::select\fP< Char_T, Map >::\fBMapNtN\fP"

.PP
Substring name to Substring number map\&. 
.SS "template<typename Char_T , template< typename\&.\&.\&. > class Map = std::map> typedef \fBMapNtN\fP \fBjpcre2::select\fP< Char_T, Map >::\fBMapNtn\fP"

.PP
Allow spelling mistake of MapNtN as MapNtn\&. 
.SS "template<typename Char_T , template< typename\&.\&.\&. > class Map = std::map> typedef std::vector<\fBString\fP> \fBjpcre2::select\fP< Char_T, Map >::\fBNumSub\fP"

.PP
Vector for Numbered substrings (Sub container)\&. 
.SS "template<typename Char_T , template< typename\&.\&.\&. > class Map = std::map> typedef std::basic_string<Char_T> \fBjpcre2::select\fP< Char_T, Map >::\fBString\fP"

.PP
Typedef for string (\fCstd::string\fP, \fCstd::wstring\fP, \fCstd::u16string\fP, \fCstd::u32string\fP)\&. Defined as \fCstd::basic_string<Char_T>\fP\&. May be this list will make more sense: Character String  char std::string  wchar_t std::wstring  char16_t std::u16string (>=C++11)  char32_t std::u32string (>=C++11)  
.SS "template<typename Char_T , template< typename\&.\&.\&. > class Map = std::map> typedef std::vector<\fBMapNas\fP> \fBjpcre2::select\fP< Char_T, Map >::\fBVecNas\fP"

.PP
Vector of matches with named substrings\&. 
.SS "template<typename Char_T , template< typename\&.\&.\&. > class Map = std::map> typedef std::vector<\fBMapNtN\fP> \fBjpcre2::select\fP< Char_T, Map >::\fBVecNtN\fP"

.PP
Vector of substring name to substring number map\&. 
.br
 
.SS "template<typename Char_T , template< typename\&.\&.\&. > class Map = std::map> typedef \fBVecNtN\fP \fBjpcre2::select\fP< Char_T, Map >::\fBVecNtn\fP"

.PP
Allow spelling mistake of VecNtN as VecNtn\&. 
.br
 
.SS "template<typename Char_T , template< typename\&.\&.\&. > class Map = std::map> typedef std::vector<\fBNumSub\fP> \fBjpcre2::select\fP< Char_T, Map >::\fBVecNum\fP"

.PP
Vector of matches with numbered substrings\&. 
.br
 
.SH "Member Function Documentation"
.PP 
.SS "template<typename Char_T , template< typename\&.\&.\&. > class Map = std::map> static \fBString\fP \fBjpcre2::select\fP< Char_T, Map >::getErrorMessage (int err_num, int err_off)\fC [inline]\fP, \fC [static]\fP"

.PP
Returns error message (either JPCRE2 or PCRE2) from error number and error offset\&. 
.PP
\fBParameters\fP
.RS 4
\fIerr_num\fP error number (negative for PCRE2, positive for JPCRE2) 
.br
\fIerr_off\fP error offset 
.RE
.PP
\fBReturns\fP
.RS 4
message as \fBjpcre2::select::String\fP\&. 
.RE
.PP

.PP
References jpcre2::ERROR::INVALID_MODIFIER\&.
.PP
Referenced by jpcre2::select< Char_T, Map >::RegexMatch::getErrorMessage(), jpcre2::select< Char_T, Map >::RegexReplace::getErrorMessage(), and jpcre2::select< Char_T, Map >::Regex::getErrorMessage()\&.
.SS "template<typename Char_T , template< typename\&.\&.\&. > class Map = std::map> static \fBString\fP \fBjpcre2::select\fP< Char_T, Map >::getPcre2ErrorMessage (int err_num)\fC [inline]\fP, \fC [static]\fP"

.PP
Retruns error message from PCRE2 error number\&. 
.PP
\fBParameters\fP
.RS 4
\fIerr_num\fP error number (negative) 
.RE
.PP
\fBReturns\fP
.RS 4
message as \fBjpcre2::select::String\fP\&. 
.RE
.PP

.SS "template<typename Char_T , template< typename\&.\&.\&. > class Map = std::map> static \fBString\fP \fBjpcre2::select\fP< Char_T, Map >::toString (\fBChar\fP * a)\fC [inline]\fP, \fC [static]\fP"

.PP
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. \&.\&.\&. Converts a Char_T* to \fBjpcre2::select::String\fP 
.PP
\fBParameters\fP
.RS 4
\fIa\fP Char_T const * 
.RE
.PP
\fBReturns\fP
.RS 4
\fBjpcre2::select::String\fP 
.RE
.PP

.SS "template<typename Char_T , template< typename\&.\&.\&. > class Map = std::map> static \fBString\fP \fBjpcre2::select\fP< Char_T, Map >::toString (\fBChar\fP a)\fC [inline]\fP, \fC [static]\fP"

.PP
Converts a Char_T to \fBjpcre2::select::String\fP\&. 
.PP
\fBParameters\fP
.RS 4
\fIa\fP Char_T 
.RE
.PP
\fBReturns\fP
.RS 4
\fBjpcre2::select::String\fP 
.RE
.PP

.SS "template<typename Char_T , template< typename\&.\&.\&. > class Map = std::map> static \fBString\fP \fBjpcre2::select\fP< Char_T, Map >::toString (\fBChar\fP const * a)\fC [inline]\fP, \fC [static]\fP"

.PP
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. \&.\&.\&. Converts a Char_T const * to \fBjpcre2::select::String\fP 
.PP
\fBParameters\fP
.RS 4
\fIa\fP Char_T const * 
.RE
.PP
\fBReturns\fP
.RS 4
\fBjpcre2::select::String\fP 
.RE
.PP

.SS "template<typename Char_T , template< typename\&.\&.\&. > class Map = std::map> static \fBString\fP \fBjpcre2::select\fP< Char_T, Map >::toString (Pcre2Uchar * a)\fC [inline]\fP, \fC [static]\fP"

.PP
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. \&.\&.\&. Converts a PCRE2_UCHAR to String 
.PP
\fBParameters\fP
.RS 4
\fIa\fP PCRE2_UCHAR 
.RE
.PP
\fBReturns\fP
.RS 4
\fBjpcre2::select::String\fP 
.RE
.PP


.SH "Author"
.PP 
Generated automatically by Doxygen for JPCRE2 from the source code\&.
