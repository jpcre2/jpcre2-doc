.TH "jpcre2" 3 "Sat Nov 19 2016" "Version 10.28.08" "JPCRE2" \" -*- nroff -*-
.ad l
.nh
.SH NAME
jpcre2 \- Top level namespace of JPCRE2\&.  

.SH SYNOPSIS
.br
.PP
.SS "Namespaces"

.in +1c
.ti -1c
.RI " \fBERROR\fP"
.br
.RI "Namespace for error codes\&. "
.ti -1c
.RI " \fBINFO\fP"
.br
.RI "Namespace to provide information about JPCRE2 library itself\&. "
.in -1c
.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBConvInt\fP"
.br
.RI "Contains a function to convert integer to string\&. "
.ti -1c
.RI "struct \fBConvUTF\fP"
.br
.RI "\fCUTF-8 <> UTF-16\fP and \fCUTF-8 <> UTF32\fP converter (\fC>=C++11\fP)\&. "
.ti -1c
.RI "struct \fBselect\fP"
.br
.RI "struct to select code unit width and the character type\&. "
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef PCRE2_SIZE \fBSIZE_T\fP"
.br
.RI "Used for match count and vector size\&. "
.ti -1c
.RI "typedef uint32_t \fBUint\fP"
.br
.RI "Used for options (bitwise operation) "
.ti -1c
.RI "typedef uint8_t \fBUsh\fP"
.br
.RI "8 bit unsigned integer\&. "
.ti -1c
.RI "typedef std::vector< PCRE2_SIZE > \fBVecOff\fP"
.br
.RI "vector of size_t "
.ti -1c
.RI "typedef \fBConvUTF\fP< char16_t >::Converter \fBConvert16\fP"
.br
.RI "This is a convenience typedef (>=C++11) to convert between UTF-8 <> UTF-16\&. "
.ti -1c
.RI "typedef \fBConvUTF\fP< char32_t >::Converter \fBConvert32\fP"
.br
.RI "This is a convenience typedef (>=C++11) to convert between UTF-8 <> UTF-32\&. "
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum { \fBNONE\fP = 0x0000000u, \fBFIND_ALL\fP = 0x0000002u, \fBJIT_COMPILE\fP = 0x0000004u }
.RI "These constants provide JPCRE2 options\&. ""
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "static const \fBSIZE_T\fP \fBSUBSTITUTE_RESULT_INIT_SIZE\fP = 0"
.br
.RI "Used by default to provide big enough initial buffer for replaced string\&. "
.in -1c
.SH "Detailed Description"
.PP 
Top level namespace of JPCRE2\&. 

All functions, classes/structs, constants, enums that are provided by JPCRE2 belong to this namespace while \fBPCRE2\fP structs, functions, constants remain outside of its scope\&.
.PP
If you want to use any PCRE2 functions or constants, remember that they are in the global scope and should be used as such\&. 
.SH "Typedef Documentation"
.PP 
.SS "typedef \fBConvUTF\fP<char16_t>::Converter \fBjpcre2::Convert16\fP"

.PP
This is a convenience typedef (>=C++11) to convert between UTF-8 <> UTF-16\&. Convert UTF-16 to UTF-8: 
.PP
.nf
Convert16 conv;
std::string s = conv\&.to_bytes(utf16string);

.fi
.PP
 Convert UTF-8 to UTF-16: 
.PP
.nf
std::u16string us = conv\&.from_bytes(utf8string);

.fi
.PP
 
.SS "typedef \fBConvUTF\fP<char32_t>::Converter \fBjpcre2::Convert32\fP"

.PP
This is a convenience typedef (>=C++11) to convert between UTF-8 <> UTF-32\&. Convert UTF-32 to UTF-8 
.PP
.nf
Convert32 conv;
std::string s = conv\&.to_bytes(utf32string);

.fi
.PP
 Convert UTF-8 to UTF-32 
.PP
.nf
std::u32string us = conv\&.from_bytes(utf8string);

.fi
.PP
 
.SS "typedef PCRE2_SIZE \fBjpcre2::SIZE_T\fP"

.PP
Used for match count and vector size\&. 
.SS "typedef uint32_t \fBjpcre2::Uint\fP"

.PP
Used for options (bitwise operation) 
.SS "typedef uint8_t \fBjpcre2::Ush\fP"

.PP
8 bit unsigned integer\&. 
.SS "typedef std::vector<PCRE2_SIZE> \fBjpcre2::VecOff\fP"

.PP
vector of size_t 
.SH "Enumeration Type Documentation"
.PP 
.SS "anonymous enum"

.PP
These constants provide JPCRE2 options\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fINONE \fP\fP
Option 0 (zero) 
.TP
\fB\fIFIND_ALL \fP\fP
Find all during match (global match) 
.TP
\fB\fIJIT_COMPILE \fP\fP
Perform JIT compilation for optimization\&. 
.SH "Variable Documentation"
.PP 
.SS "const \fBSIZE_T\fP jpcre2::SUBSTITUTE_RESULT_INIT_SIZE = 0\fC [static]\fP"

.PP
Used by default to provide big enough initial buffer for replaced string\&. 0 or insufficient values will force a second call to pcre2_substitute(), If that is not desirable, pass a big enough buffer size with RegexReplace::setBufferSize() function to make it a single call operation\&. 
.SH "Author"
.PP 
Generated automatically by Doxygen for JPCRE2 from the source code\&.
