.TH "jpcre2::select< Char_T, BS >::MatchEvaluator" 3 "Tue Mar 7 2017" "Version 10.29.03" "JPCRE2" \" -*- nroff -*-
.ad l
.nh
.SH NAME
jpcre2::select< Char_T, BS >::MatchEvaluator \- This class inherits \fBRegexMatch\fP and provides a similar functionality\&.  

.SH SYNOPSIS
.br
.PP
.PP
\fC#include <jpcre2\&.hpp>\fP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "\fBMatchEvaluator\fP ()"
.br
.RI "Default constructor\&. "
.ti -1c
.RI "\fBMatchEvaluator\fP (const \fBRegex\fP *r)"
.br
.RI "This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. \&.\&.\&. "
.ti -1c
.RI "\fBMatchEvaluator\fP (typename \fBMatchEvaluatorCallback\fP< void *, void *, void *>::Callback mef)"
.br
.RI "This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. \&.\&.\&. "
.ti -1c
.RI "\fBMatchEvaluator\fP (typename \fBMatchEvaluatorCallback\fP< const \fBNumSub\fP &, void *, void *>::Callback mef)"
.br
.RI "This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. \&.\&.\&. "
.ti -1c
.RI "\fBMatchEvaluator\fP (typename \fBMatchEvaluatorCallback\fP< const \fBNumSub\fP &, const \fBMapNas\fP &, void *>::Callback mef)"
.br
.RI "This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. \&.\&.\&. "
.ti -1c
.RI "\fBMatchEvaluator\fP (typename \fBMatchEvaluatorCallback\fP< const \fBNumSub\fP &, void *, const \fBMapNtN\fP &>::Callback mef)"
.br
.RI "This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. \&.\&.\&. "
.ti -1c
.RI "\fBMatchEvaluator\fP (typename \fBMatchEvaluatorCallback\fP< const \fBNumSub\fP &, const \fBMapNas\fP &, const \fBMapNtN\fP &>::Callback mef)"
.br
.RI "This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. \&.\&.\&. "
.ti -1c
.RI "\fBMatchEvaluator\fP (typename \fBMatchEvaluatorCallback\fP< void *, const \fBMapNas\fP &, void *>::Callback mef)"
.br
.RI "This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. \&.\&.\&. "
.ti -1c
.RI "\fBMatchEvaluator\fP (typename \fBMatchEvaluatorCallback\fP< void *, const \fBMapNas\fP &, const \fBMapNtN\fP &>::Callback mef)"
.br
.RI "This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. \&.\&.\&. "
.ti -1c
.RI "\fBMatchEvaluator\fP (typename \fBMatchEvaluatorCallback\fP< void *, void *, const \fBMapNtN\fP &>::Callback mef)"
.br
.RI "This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. \&.\&.\&. "
.ti -1c
.RI "\fBMatchEvaluator\fP (const \fBMatchEvaluator\fP &me)"
.br
.RI "This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. \&.\&.\&. "
.ti -1c
.RI "\fBMatchEvaluator\fP & \fBoperator=\fP (const \fBMatchEvaluator\fP &me)"
.br
.RI "Overloaded copy-assignment operator\&. "
.ti -1c
.RI "\fBMatchEvaluator\fP & \fBsetMatchEvaluatorCallback\fP (typename \fBMatchEvaluatorCallback\fP< void *, void *, void *>::Callback mef)"
.br
.RI "Member function to set a callback function with no vector reference\&. "
.ti -1c
.RI "\fBMatchEvaluator\fP & \fBsetMatchEvaluatorCallback\fP (typename \fBMatchEvaluatorCallback\fP< const \fBNumSub\fP &, void *, void *>::Callback mef)"
.br
.RI "This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. \&.\&.\&. "
.ti -1c
.RI "\fBMatchEvaluator\fP & \fBsetMatchEvaluatorCallback\fP (typename \fBMatchEvaluatorCallback\fP< const \fBNumSub\fP &, const \fBMapNas\fP &, void *>::Callback mef)"
.br
.RI "This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. \&.\&.\&. "
.ti -1c
.RI "\fBMatchEvaluator\fP & \fBsetMatchEvaluatorCallback\fP (typename \fBMatchEvaluatorCallback\fP< const \fBNumSub\fP &, void *, const \fBMapNtN\fP &>::Callback mef)"
.br
.RI "This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. \&.\&.\&. "
.ti -1c
.RI "\fBMatchEvaluator\fP & \fBsetMatchEvaluatorCallback\fP (typename \fBMatchEvaluatorCallback\fP< const \fBNumSub\fP &, const \fBMapNas\fP &, const \fBMapNtN\fP &>::Callback mef)"
.br
.RI "This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. \&.\&.\&. "
.ti -1c
.RI "\fBMatchEvaluator\fP & \fBsetMatchEvaluatorCallback\fP (typename \fBMatchEvaluatorCallback\fP< void *, const \fBMapNas\fP &, void *>::Callback mef)"
.br
.RI "This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. \&.\&.\&. "
.ti -1c
.RI "\fBMatchEvaluator\fP & \fBsetMatchEvaluatorCallback\fP (typename \fBMatchEvaluatorCallback\fP< void *, const \fBMapNas\fP &, const \fBMapNtN\fP &>::Callback mef)"
.br
.RI "This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. \&.\&.\&. "
.ti -1c
.RI "\fBMatchEvaluator\fP & \fBsetMatchEvaluatorCallback\fP (typename \fBMatchEvaluatorCallback\fP< void *, void *, const \fBMapNtN\fP &>::Callback mef)"
.br
.RI "This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. \&.\&.\&. "
.ti -1c
.RI "\fBMatchEvaluator\fP & \fBclearMatchDataVectors\fP ()"
.br
.RI "Clear match data\&. "
.ti -1c
.RI "\fBMatchEvaluator\fP & \fBreset\fP ()"
.br
.RI "Reset \fBMatchEvaluator\fP retaining callback function\&. "
.ti -1c
.RI "\fBMatchEvaluator\fP & \fBresetErrors\fP ()"
.br
.RI "Call \fBRegexMatch::resetErrors()\fP\&. "
.ti -1c
.RI "\fBMatchEvaluator\fP & \fBsetRegexObject\fP (const \fBRegex\fP *r)"
.br
.RI "Call RegexMatch::setRegexObject(r)\&. "
.ti -1c
.RI "\fBMatchEvaluator\fP & \fBsetSubject\fP (const \fBString\fP &s)"
.br
.RI "Call \fBRegexMatch::setSubject(const String &s)\fP\&. "
.ti -1c
.RI "\fBMatchEvaluator\fP & \fBsetSubject\fP (const \fBString\fP *s)"
.br
.RI "Call \fBRegexMatch::setSubject(const String *s)\fP\&. "
.ti -1c
.RI "\fBMatchEvaluator\fP & \fBsetModifier\fP (const std::string &s)"
.br
.RI "Call \fBRegexMatch::setModifier(const std::string &s)\fP\&. "
.ti -1c
.RI "\fBMatchEvaluator\fP & \fBsetJpcre2Option\fP (\fBUint\fP x)"
.br
.RI "Call \fBRegexMatch::setJpcre2Option(Uint x)\fP\&. "
.ti -1c
.RI "\fBMatchEvaluator\fP & \fBsetPcre2Option\fP (\fBUint\fP x)"
.br
.RI "Call \fBRegexMatch::setPcre2Option\fP (Uint x)\&. "
.ti -1c
.RI "\fBMatchEvaluator\fP & \fBsetFindAll\fP (bool x)"
.br
.RI "Call \fBRegexMatch::setFindAll(bool x)\fP\&. "
.ti -1c
.RI "\fBMatchEvaluator\fP & \fBsetFindAll\fP ()"
.br
.RI "Call \fBRegexMatch::setFindAll()\fP\&. "
.ti -1c
.RI "\fBMatchEvaluator\fP & \fBsetStartOffset\fP (PCRE2_SIZE offset)"
.br
.RI "Call \fBRegexMatch::setStartOffset\fP (PCRE2_SIZE offset)\&. "
.ti -1c
.RI "\fBMatchEvaluator\fP & \fBsetMatchContext\fP (MatchContext *match_context)"
.br
.RI "Call \fBRegexMatch::setMatchContext(MatchContext *match_context)\fP\&. "
.ti -1c
.RI "\fBMatchEvaluator\fP & \fBchangeModifier\fP (const std::string &mod, bool x)"
.br
.RI "Call \fBRegexMatch::changeModifier(const std::string &mod, bool x)\fP\&. "
.ti -1c
.RI "\fBMatchEvaluator\fP & \fBchangeJpcre2Option\fP (\fBUint\fP opt, bool x)"
.br
.RI "Call \fBRegexMatch::changeJpcre2Option(Uint opt, bool x)\fP\&. "
.ti -1c
.RI "\fBMatchEvaluator\fP & \fBchangePcre2Option\fP (\fBUint\fP opt, bool x)"
.br
.RI "Call \fBRegexMatch::changePcre2Option(Uint opt, bool x)\fP\&. "
.ti -1c
.RI "\fBMatchEvaluator\fP & \fBaddModifier\fP (const std::string &mod)"
.br
.RI "Call \fBRegexMatch::addModifier(const std::string &mod)\fP\&. "
.ti -1c
.RI "\fBMatchEvaluator\fP & \fBaddJpcre2Option\fP (\fBUint\fP x)"
.br
.RI "Call \fBRegexMatch::addJpcre2Option(Uint x)\fP\&. "
.ti -1c
.RI "\fBMatchEvaluator\fP & \fBaddPcre2Option\fP (\fBUint\fP x)"
.br
.RI "Call \fBRegexMatch::addPcre2Option(Uint x)\fP\&. "
.ti -1c
.RI "\fBSIZE_T\fP \fBmatch\fP (void)"
.br
.RI "Perform match and return the match count\&. "
.ti -1c
.RI "\fBString\fP \fBnreplace\fP (bool do_match=true)"
.br
.RI "Perform regex replace with this match evaluator\&. "
.ti -1c
.RI "virtual int \fBgetErrorNumber\fP () const"
.br
.RI "Returns the last error number\&. "
.ti -1c
.RI "virtual int \fBgetErrorOffset\fP () const"
.br
.RI "Returns the last error offset\&. "
.ti -1c
.RI "virtual \fBString\fP \fBgetErrorMessage\fP () const"
.br
.RI "Returns the last error message\&. "
.ti -1c
.RI "virtual \fBString\fP \fBgetSubject\fP () const"
.br
.RI "Get subject string\&. "
.ti -1c
.RI "virtual const \fBString\fP * \fBgetSubjectPointer\fP () const"
.br
.RI "Get pointer to subject string\&. "
.ti -1c
.RI "virtual std::string \fBgetModifier\fP () const"
.br
.RI "Calculate modifier string from PCRE2 and JPCRE2 options and return it\&. "
.ti -1c
.RI "virtual \fBUint\fP \fBgetPcre2Option\fP () const"
.br
.RI "Get PCRE2 option\&. "
.ti -1c
.RI "virtual \fBUint\fP \fBgetJpcre2Option\fP () const"
.br
.RI "Get JPCRE2 option\&. "
.ti -1c
.RI "virtual PCRE2_SIZE \fBgetStartOffset\fP () const"
.br
.RI "Get offset from where match will start in the subject\&. "
.ti -1c
.RI "virtual \fBVecOff\fP * \fBgetMatchStartOffsetVector\fP () const"
.br
.RI "Get match start offset vector pointer\&. "
.ti -1c
.RI "virtual \fBVecOff\fP * \fBgetMatchEndOffsetVector\fP () const"
.br
.RI "Get match end offset vector pointer\&. "
.ti -1c
.RI "virtual const \fBRegex\fP * \fBgetRegexObject\fP () const"
.br
.RI "Get a pointer to the associated \fBRegex\fP object\&. "
.ti -1c
.RI "virtual \fBVecNum\fP * \fBgetNumberedSubstringVector\fP () const"
.br
.RI "Get pointer to numbered substring vector\&. "
.ti -1c
.RI "virtual \fBVecNas\fP * \fBgetNamedSubstringVector\fP () const"
.br
.RI "Get pointer to named substring vector\&. "
.ti -1c
.RI "virtual \fBVecNtN\fP * \fBgetNameToNumberMapVector\fP () const"
.br
.RI "Get pointer to name to number map vector\&. "
.in -1c
.SH "Detailed Description"
.PP 

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT>
.br
class jpcre2::select< Char_T, BS >::MatchEvaluator"
This class inherits \fBRegexMatch\fP and provides a similar functionality\&. 

All public member functions from \fBRegexMatch\fP class are publicly available except the following:
.IP "\(bu" 2
setNumberedSubstringVector
.IP "\(bu" 2
setNamedSubstringVector
.IP "\(bu" 2
setNameToNumberMapVector
.IP "\(bu" 2
setMatchStartOffsetVector
.IP "\(bu" 2
setMatchEndOffsetVector
.PP
.PP
The use of above functions is not allowed as the vectors are created according to the callback function you pass\&.
.PP
Each constructor of this class takes a callback function as argument (see \fC\fBMatchEvaluatorCallback\fP\fP)\&.
.PP
It provides a \fBMatchEvaluator::nreplace()\fP function to perform replace operation\&.
.PP
An instance of this class can also be passed with \fC\fBRegexReplace::nreplace()\fP\fP function to perform replacement according to this match evaluator\&.
.PP
Match data is stored in vectors, and the vectors are populated according to the callback functions\&. Populated vector data is never deleted but they get overwritten\&. Vector data can be manually zeroed out by calling \fC\fBMatchEvaluator::clearMatchDataVectors()\fP\fP\&.
.PP
.SH "Compatibility of callback function with Match Data"
.PP
.PP
A match data populated with a callback function that takes only a \fBjp::NumSub\fP vector is not compatible with the data created according to callback function with a \fBjp::MapNas\fP vector\&. Because, for this later callback, \fBjp::MapNas\fP data is required but is not available (only \fBjp::NumSub\fP is available)\&. In such cases, previous Match data can not be used to perform a new replacment operation with this second callback function\&.
.PP
To populate the match vectors, one must call the \fC\fBMatchEvaluator::match()\fP\fP or \fC\fBMatchEvaluator::nreplace()\fP\fP function, they will populated vectors with match data according to call back function\&.
.PP
.SS "Example:"
.PP
.PP
.nf
jp::String callback5(const NumSub& m, void*, const MapNtn& n){
    return m[0];
}
jp::String callback4(void*, void*, const MapNtn& n){
    return jpcre2::ConvInt<char>::toString(n\&.at("name")); //position of group 'name'\&.
}
jp::String callback2(void*, const MapNas& m, void*){
    return m\&.at('name'); //substring by name
}

jp::MatchEvaluator me;
me\&.setRegexObject(&re)\&.setSubject("string")\&.setMatchEvaluatorCallback(callback5)\&.nreplace();
//In above, nreplace() populates jp::NumSub and jp::MapNtn with match data\&.

me\&.setMatchEvaluatorCallback(callback4)\&.nreplace(false);
//the above uses previous match result (note the 'false') which is OK, 
//because, callback4 requires jp::MapNtn which was made available in the previous operation\&.

//but the following is not OK: (assertion failure)
me\&.setMatchEvaluatorCallback(callback2)\&.nreplace(false);
//because, callback2 requires jp::MapNas data which is not available\&.
//now, this is OK:
me\&.setMatchEvaluatorCallback(callback2)\&.nreplace();
//because, it will recreate those match data including this one (jp::MapNas)\&.
.fi
.PP
 
.PP
\fBSee also:\fP
.RS 4
\fBMatchEvaluatorCallback\fP 
.PP
\fBRegexReplace::nreplace()\fP 
.RE
.PP

.SH "Constructor & Destructor Documentation"
.PP 
.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBjpcre2::select\fP< Char_T, BS >::MatchEvaluator::MatchEvaluator ()\fC [inline]\fP, \fC [explicit]\fP"

.PP
Default constructor\&. Sets \fBcallback::erase\fP as the callback function\&. Removes matched part/s from the subject string if the callback is not changed\&. 
.PP
.nf
jp::Regex re("\s*string");
jp::MatchEvaluator me;
std::cout<<
me\&.setRegexObject(&re);
  \&.setSubject("I am a   string");
  \&.nreplace();
//The above will delete '   string' from the subject
//thus the result will be 'I am a'

.fi
.PP
 
.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBjpcre2::select\fP< Char_T, BS >::MatchEvaluator::MatchEvaluator (const \fBRegex\fP * r)\fC [inline]\fP, \fC [explicit]\fP"

.PP
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. \&.\&.\&. Constructor taking a \fBRegex\fP object pointer\&. It sets the associated \fBRegex\fP object and initializes the \fBMatchEvaluator\fP object with \fBcallback::erase\fP callback function\&. 
.PP
\fBParameters:\fP
.RS 4
\fIr\fP constant \fBRegex\fP pointer\&. 
.RE
.PP

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBjpcre2::select\fP< Char_T, BS >::MatchEvaluator::MatchEvaluator (typename \fBMatchEvaluatorCallback\fP< void *, void *, void *>::Callback mef)\fC [inline]\fP, \fC [explicit]\fP"

.PP
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. \&.\&.\&. Constructor taking a callback function\&. It calls a corresponding \fBMatchEvaluator::setMatchEvaluatorCallback()\fP function to set the callback function\&. 
.PP
\fBParameters:\fP
.RS 4
\fImef\fP Callback function\&. 
.RE
.PP

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBjpcre2::select\fP< Char_T, BS >::MatchEvaluator::MatchEvaluator (typename \fBMatchEvaluatorCallback\fP< const \fBNumSub\fP &, void *, void *>::Callback mef)\fC [inline]\fP, \fC [explicit]\fP"

.PP
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. \&.\&.\&. It calls a corresponding \fBMatchEvaluator::setMatchEvaluatorCallback()\fP function to set the callback function\&. 
.PP
\fBParameters:\fP
.RS 4
\fImef\fP Callback function\&. 
.RE
.PP

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBjpcre2::select\fP< Char_T, BS >::MatchEvaluator::MatchEvaluator (typename \fBMatchEvaluatorCallback\fP< const \fBNumSub\fP &, const \fBMapNas\fP &, void *>::Callback mef)\fC [inline]\fP, \fC [explicit]\fP"

.PP
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. \&.\&.\&. It calls a corresponding \fBMatchEvaluator::setMatchEvaluatorCallback()\fP function to set the callback function\&. 
.PP
\fBParameters:\fP
.RS 4
\fImef\fP Callback function\&. 
.RE
.PP

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBjpcre2::select\fP< Char_T, BS >::MatchEvaluator::MatchEvaluator (typename \fBMatchEvaluatorCallback\fP< const \fBNumSub\fP &, void *, const \fBMapNtN\fP &>::Callback mef)\fC [inline]\fP, \fC [explicit]\fP"

.PP
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. \&.\&.\&. It calls a corresponding \fBMatchEvaluator::setMatchEvaluatorCallback()\fP function to set the callback function\&. 
.PP
\fBParameters:\fP
.RS 4
\fImef\fP Callback function\&. 
.RE
.PP

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBjpcre2::select\fP< Char_T, BS >::MatchEvaluator::MatchEvaluator (typename \fBMatchEvaluatorCallback\fP< const \fBNumSub\fP &, const \fBMapNas\fP &, const \fBMapNtN\fP &>::Callback mef)\fC [inline]\fP, \fC [explicit]\fP"

.PP
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. \&.\&.\&. It calls a corresponding \fBMatchEvaluator::setMatchEvaluatorCallback()\fP function to set the callback function\&. 
.PP
\fBParameters:\fP
.RS 4
\fImef\fP Callback function\&. 
.RE
.PP

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBjpcre2::select\fP< Char_T, BS >::MatchEvaluator::MatchEvaluator (typename \fBMatchEvaluatorCallback\fP< void *, const \fBMapNas\fP &, void *>::Callback mef)\fC [inline]\fP, \fC [explicit]\fP"

.PP
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. \&.\&.\&. It calls a corresponding \fBMatchEvaluator::setMatchEvaluatorCallback()\fP function to set the callback function\&. 
.PP
\fBParameters:\fP
.RS 4
\fImef\fP Callback function\&. 
.RE
.PP

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBjpcre2::select\fP< Char_T, BS >::MatchEvaluator::MatchEvaluator (typename \fBMatchEvaluatorCallback\fP< void *, const \fBMapNas\fP &, const \fBMapNtN\fP &>::Callback mef)\fC [inline]\fP, \fC [explicit]\fP"

.PP
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. \&.\&.\&. It calls a corresponding \fBMatchEvaluator::setMatchEvaluatorCallback()\fP function to set the callback function\&. 
.PP
\fBParameters:\fP
.RS 4
\fImef\fP Callback function\&. 
.RE
.PP

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBjpcre2::select\fP< Char_T, BS >::MatchEvaluator::MatchEvaluator (typename \fBMatchEvaluatorCallback\fP< void *, void *, const \fBMapNtN\fP &>::Callback mef)\fC [inline]\fP, \fC [explicit]\fP"

.PP
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. \&.\&.\&. It calls a corresponding \fBMatchEvaluator::setMatchEvaluatorCallback()\fP function to set the callback function\&. 
.PP
\fBParameters:\fP
.RS 4
\fImef\fP Callback function\&. 
.RE
.PP

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBjpcre2::select\fP< Char_T, BS >::MatchEvaluator::MatchEvaluator (const \fBMatchEvaluator\fP & me)\fC [inline]\fP"

.PP
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. \&.\&.\&. Copy constructor\&. Performs deep copy\&. 
.PP
\fBParameters:\fP
.RS 4
\fIme\fP Reference to \fBMatchEvaluator\fP object 
.RE
.PP

.SH "Member Function Documentation"
.PP 
.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBMatchEvaluator\fP& \fBjpcre2::select\fP< Char_T, BS >::MatchEvaluator::addJpcre2Option (\fBUint\fP x)\fC [inline]\fP, \fC [virtual]\fP"

.PP
Call \fBRegexMatch::addJpcre2Option(Uint x)\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP JPCRE2 option\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A reference to the calling \fBMatchEvaluator\fP object\&. 
.RE
.PP

.PP
Reimplemented from \fBjpcre2::select< Char_T, BS >::RegexMatch\fP\&.
.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBMatchEvaluator\fP& \fBjpcre2::select\fP< Char_T, BS >::MatchEvaluator::addModifier (const std::string & mod)\fC [inline]\fP, \fC [virtual]\fP"

.PP
Call \fBRegexMatch::addModifier(const std::string &mod)\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fImod\fP modifier string\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A reference to the calling \fBMatchEvaluator\fP object\&. 
.RE
.PP

.PP
Reimplemented from \fBjpcre2::select< Char_T, BS >::RegexMatch\fP\&.
.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBMatchEvaluator\fP& \fBjpcre2::select\fP< Char_T, BS >::MatchEvaluator::addPcre2Option (\fBUint\fP x)\fC [inline]\fP, \fC [virtual]\fP"

.PP
Call \fBRegexMatch::addPcre2Option(Uint x)\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP PCRE2 option\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A reference to the calling \fBMatchEvaluator\fP object\&. 
.RE
.PP

.PP
Reimplemented from \fBjpcre2::select< Char_T, BS >::RegexMatch\fP\&.
.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBMatchEvaluator\fP& \fBjpcre2::select\fP< Char_T, BS >::MatchEvaluator::changeJpcre2Option (\fBUint\fP opt, bool x)\fC [inline]\fP, \fC [virtual]\fP"

.PP
Call \fBRegexMatch::changeJpcre2Option(Uint opt, bool x)\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIopt\fP JPCRE2 option 
.br
\fIx\fP true (add) or false (remove)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A reference to the calling \fBMatchEvaluator\fP object\&. 
.RE
.PP

.PP
Reimplemented from \fBjpcre2::select< Char_T, BS >::RegexMatch\fP\&.
.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBMatchEvaluator\fP& \fBjpcre2::select\fP< Char_T, BS >::MatchEvaluator::changeModifier (const std::string & mod, bool x)\fC [inline]\fP, \fC [virtual]\fP"

.PP
Call \fBRegexMatch::changeModifier(const std::string &mod, bool x)\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fImod\fP modifier string\&. 
.br
\fIx\fP true (add) or false (remove)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A reference to the calling \fBMatchEvaluator\fP object\&. 
.RE
.PP

.PP
Reimplemented from \fBjpcre2::select< Char_T, BS >::RegexMatch\fP\&.
.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBMatchEvaluator\fP& \fBjpcre2::select\fP< Char_T, BS >::MatchEvaluator::changePcre2Option (\fBUint\fP opt, bool x)\fC [inline]\fP, \fC [virtual]\fP"

.PP
Call \fBRegexMatch::changePcre2Option(Uint opt, bool x)\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIopt\fP PCRE2 option\&. 
.br
\fIx\fP true (add) or false (remove)\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A reference to the calling \fBMatchEvaluator\fP object\&. 
.RE
.PP

.PP
Reimplemented from \fBjpcre2::select< Char_T, BS >::RegexMatch\fP\&.
.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBMatchEvaluator\fP& \fBjpcre2::select\fP< Char_T, BS >::MatchEvaluator::clearMatchDataVectors ()\fC [inline]\fP"

.PP
Clear match data\&. It clears all match data from all vectors\&. A call to \fC\fBmatch()\fP\fP or \fBnreplace()\fP will be required to produce match data again\&. 
.PP
\fBReturns:\fP
.RS 4
A reference to the calling \fBMatchEvaluator\fP object\&. 
.RE
.PP

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> virtual \fBString\fP \fBjpcre2::select\fP< Char_T, BS >::RegexMatch::getErrorMessage () const\fC [inline]\fP, \fC [virtual]\fP, \fC [inherited]\fP"

.PP
Returns the last error message\&. 
.PP
\fBReturns:\fP
.RS 4
Last error message 
.RE
.PP

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> virtual int \fBjpcre2::select\fP< Char_T, BS >::RegexMatch::getErrorNumber () const\fC [inline]\fP, \fC [virtual]\fP, \fC [inherited]\fP"

.PP
Returns the last error number\&. 
.PP
\fBReturns:\fP
.RS 4
Last error number 
.RE
.PP

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> virtual int \fBjpcre2::select\fP< Char_T, BS >::RegexMatch::getErrorOffset () const\fC [inline]\fP, \fC [virtual]\fP, \fC [inherited]\fP"

.PP
Returns the last error offset\&. 
.PP
\fBReturns:\fP
.RS 4
Last error offset 
.RE
.PP

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> virtual \fBUint\fP \fBjpcre2::select\fP< Char_T, BS >::RegexMatch::getJpcre2Option () const\fC [inline]\fP, \fC [virtual]\fP, \fC [inherited]\fP"

.PP
Get JPCRE2 option\&. 
.PP
\fBReturns:\fP
.RS 4
JPCRE2 options for math operation 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBRegex::getJpcre2Option()\fP 
.PP
\fBRegexReplace::getJpcre2Option()\fP 
.RE
.PP

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> virtual \fBVecOff\fP* \fBjpcre2::select\fP< Char_T, BS >::RegexMatch::getMatchEndOffsetVector () const\fC [inline]\fP, \fC [virtual]\fP, \fC [inherited]\fP"

.PP
Get match end offset vector pointer\&. 
.PP
\fBReturns:\fP
.RS 4
pointer to the end start offset vector 
.RE
.PP

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> virtual \fBVecOff\fP* \fBjpcre2::select\fP< Char_T, BS >::RegexMatch::getMatchStartOffsetVector () const\fC [inline]\fP, \fC [virtual]\fP, \fC [inherited]\fP"

.PP
Get match start offset vector pointer\&. 
.PP
\fBReturns:\fP
.RS 4
pointer to the match start offset vector 
.RE
.PP

.SS "template<typename Char_T , jpcre2::Ush BS> std::string \fBjpcre2::select\fP< Char_T, BS >::RegexMatch::getModifier () const\fC [virtual]\fP, \fC [inherited]\fP"

.PP
Calculate modifier string from PCRE2 and JPCRE2 options and return it\&. Do remember that modifiers (or PCRE2 and JPCRE2 options) do not change or get initialized as long as you don't do that explicitly\&. Calling \fBRegexMatch::setModifier()\fP will re-set them\&.
.PP
\fBMixed or combined modifier\fP\&.
.PP
Some modifier may include other modifiers i\&.e they have the same meaning of some modifiers combined together\&. For example, the 'n' modifier includes the 'u' modifier and together they are equivalent to \fCPCRE2_UTF | PCRE2_UCP\fP\&. When you set a modifier like this, both options get set, and when you remove the 'n' modifier (with \fC\fBRegexMatch::changeModifier()\fP\fP), both will get removed\&. 
.PP
\fBReturns:\fP
.RS 4
Calculated modifier string (std::string) 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBRegex::getModifier()\fP 
.PP
\fBRegexReplace::getModifier()\fP 
.RE
.PP

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> virtual \fBVecNas\fP* \fBjpcre2::select\fP< Char_T, BS >::RegexMatch::getNamedSubstringVector () const\fC [inline]\fP, \fC [virtual]\fP, \fC [inherited]\fP"

.PP
Get pointer to named substring vector\&. 
.PP
\fBReturns:\fP
.RS 4
Pointer to named substring vector\&. 
.RE
.PP

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> virtual \fBVecNtN\fP* \fBjpcre2::select\fP< Char_T, BS >::RegexMatch::getNameToNumberMapVector () const\fC [inline]\fP, \fC [virtual]\fP, \fC [inherited]\fP"

.PP
Get pointer to name to number map vector\&. 
.PP
\fBReturns:\fP
.RS 4
Pointer to name to number map vector\&. 
.RE
.PP

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> virtual \fBVecNum\fP* \fBjpcre2::select\fP< Char_T, BS >::RegexMatch::getNumberedSubstringVector () const\fC [inline]\fP, \fC [virtual]\fP, \fC [inherited]\fP"

.PP
Get pointer to numbered substring vector\&. 
.PP
\fBReturns:\fP
.RS 4
Pointer to numbered substring vector\&. 
.RE
.PP

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> virtual \fBUint\fP \fBjpcre2::select\fP< Char_T, BS >::RegexMatch::getPcre2Option () const\fC [inline]\fP, \fC [virtual]\fP, \fC [inherited]\fP"

.PP
Get PCRE2 option\&. 
.PP
\fBReturns:\fP
.RS 4
PCRE2 option for match operation 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBRegex::getPcre2Option()\fP 
.PP
\fBRegexReplace::getPcre2Option()\fP 
.RE
.PP

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> virtual const \fBRegex\fP* \fBjpcre2::select\fP< Char_T, BS >::RegexMatch::getRegexObject () const\fC [inline]\fP, \fC [virtual]\fP, \fC [inherited]\fP"

.PP
Get a pointer to the associated \fBRegex\fP object\&. If no actual \fBRegex\fP object is associated, null is returned\&. 
.PP
\fBReturns:\fP
.RS 4
A pointer to the associated \fBRegex\fP object or null\&. 
.RE
.PP

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> virtual PCRE2_SIZE \fBjpcre2::select\fP< Char_T, BS >::RegexMatch::getStartOffset () const\fC [inline]\fP, \fC [virtual]\fP, \fC [inherited]\fP"

.PP
Get offset from where match will start in the subject\&. 
.PP
\fBReturns:\fP
.RS 4
Start offset 
.RE
.PP

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> virtual \fBString\fP \fBjpcre2::select\fP< Char_T, BS >::RegexMatch::getSubject () const\fC [inline]\fP, \fC [virtual]\fP, \fC [inherited]\fP"

.PP
Get subject string\&. 
.PP
\fBReturns:\fP
.RS 4
subject string 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBRegexReplace::getSubject()\fP 
.RE
.PP

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> virtual const \fBString\fP* \fBjpcre2::select\fP< Char_T, BS >::RegexMatch::getSubjectPointer () const\fC [inline]\fP, \fC [virtual]\fP, \fC [inherited]\fP"

.PP
Get pointer to subject string\&. Data can not be changed with this pointer\&. 
.PP
\fBReturns:\fP
.RS 4
subject string pointer 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBRegexReplace::getSubjectPointer()\fP 
.RE
.PP

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBSIZE_T\fP \fBjpcre2::select\fP< Char_T, BS >::MatchEvaluator::match (void)\fC [inline]\fP, \fC [virtual]\fP"

.PP
Perform match and return the match count\&. This function modifies matching options that are considered bad options for replacement operation and then calls the original \fBRegexMatch::match()\fP to perform the match\&.
.PP
This function checks for null \fBRegex\fP pointer and if no \fBRegex\fP object is set, it gives out assertion failure\&. 
.PP
\fBReturns:\fP
.RS 4
match count\&. 
.RE
.PP

.PP
Reimplemented from \fBjpcre2::select< Char_T, BS >::RegexMatch\fP\&.
.PP
References JPCRE2_ASSERT\&.
.SS "template<typename Char_T , jpcre2::Ush BS> \fBjpcre2::select\fP< Char_T, BS >::\fBString\fP \fBjpcre2::select\fP< Char_T, BS >::MatchEvaluator::nreplace (bool do_match = \fCtrue\fP)"

.PP
Perform regex replace with this match evaluator\&. This is a JPCRE2 native replace function (thus the name nreplace)\&. It uses the \fC\fBMatchEvaluatorCallback\fP\fP function that was set with a constructor or \fC\fBMatchEvaluator::setMatchEvaluatorCallback()\fP\fP function to generate the replacement strings on the fly\&. The string returned by the callback function will be treated as literal and will not go through any further processing\&.
.PP
This function performs a new match everytime it is called unless it is passed with a boolean \fCfalse\fP as argument\&. To use existing match data that was created by a previous \fC\fBMatchEvaluator::nreplace()\fP\fP or \fC\fBMatchEvaluator::match()\fP\fP, call this function with boolean \fCfalse\fP as argument\&. 
.PP
\fBParameters:\fP
.RS 4
\fIdo_match\fP Perform a new matching operation if true, otherwise use existing match data\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
resultant string after replace\&. 
.RE
.PP
\fBSee also:\fP
.RS 4
\fBMatchEvaluator\fP\&. 
.PP
\fBMatchEvaluatorCallback\fP\&. 
.RE
.PP

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBMatchEvaluator\fP& \fBjpcre2::select\fP< Char_T, BS >::MatchEvaluator::operator= (const \fBMatchEvaluator\fP & me)\fC [inline]\fP"

.PP
Overloaded copy-assignment operator\&. 
.PP
\fBParameters:\fP
.RS 4
\fIme\fP \fBMatchEvaluator\fP object 
.RE
.PP
\fBReturns:\fP
.RS 4
A reference to the calling \fBMatchEvaluator\fP object\&. 
.RE
.PP

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBMatchEvaluator\fP& \fBjpcre2::select\fP< Char_T, BS >::MatchEvaluator::reset ()\fC [inline]\fP, \fC [virtual]\fP"

.PP
Reset \fBMatchEvaluator\fP retaining callback function\&. It calls the base \fC\fBRegexMatch::reset()\fP\fP function and then updates the vector pointers (internal use)\&. It clears all match data in all vectors\&. 
.PP
\fBReturns:\fP
.RS 4
A reference to the calling \fBMatchEvaluator\fP object\&. 
.RE
.PP

.PP
Reimplemented from \fBjpcre2::select< Char_T, BS >::RegexMatch\fP\&.
.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBMatchEvaluator\fP& \fBjpcre2::select\fP< Char_T, BS >::MatchEvaluator::resetErrors ()\fC [inline]\fP, \fC [virtual]\fP"

.PP
Call \fBRegexMatch::resetErrors()\fP\&. 
.PP
\fBReturns:\fP
.RS 4
A reference to the calling \fBMatchEvaluator\fP object\&. 
.RE
.PP

.PP
Reimplemented from \fBjpcre2::select< Char_T, BS >::RegexMatch\fP\&.
.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBMatchEvaluator\fP& \fBjpcre2::select\fP< Char_T, BS >::MatchEvaluator::setFindAll (bool x)\fC [inline]\fP, \fC [virtual]\fP"

.PP
Call \fBRegexMatch::setFindAll(bool x)\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP true if global match, false otherwise\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A reference to the calling \fBMatchEvaluator\fP object\&. 
.RE
.PP

.PP
Reimplemented from \fBjpcre2::select< Char_T, BS >::RegexMatch\fP\&.
.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBMatchEvaluator\fP& \fBjpcre2::select\fP< Char_T, BS >::MatchEvaluator::setFindAll ()\fC [inline]\fP, \fC [virtual]\fP"

.PP
Call \fBRegexMatch::setFindAll()\fP\&. 
.PP
\fBReturns:\fP
.RS 4
A reference to the calling \fBMatchEvaluator\fP object\&. 
.RE
.PP

.PP
Reimplemented from \fBjpcre2::select< Char_T, BS >::RegexMatch\fP\&.
.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBMatchEvaluator\fP& \fBjpcre2::select\fP< Char_T, BS >::MatchEvaluator::setJpcre2Option (\fBUint\fP x)\fC [inline]\fP, \fC [virtual]\fP"

.PP
Call \fBRegexMatch::setJpcre2Option(Uint x)\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP JPCRE2 option value\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A reference to the calling \fBMatchEvaluator\fP object\&. 
.RE
.PP

.PP
Reimplemented from \fBjpcre2::select< Char_T, BS >::RegexMatch\fP\&.
.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBMatchEvaluator\fP& \fBjpcre2::select\fP< Char_T, BS >::MatchEvaluator::setMatchContext (MatchContext * match_context)\fC [inline]\fP, \fC [virtual]\fP"

.PP
Call \fBRegexMatch::setMatchContext(MatchContext *match_context)\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fImatch_context\fP pointer to match context\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A reference to the calling \fBMatchEvaluator\fP object\&. 
.RE
.PP

.PP
Reimplemented from \fBjpcre2::select< Char_T, BS >::RegexMatch\fP\&.
.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBMatchEvaluator\fP& \fBjpcre2::select\fP< Char_T, BS >::MatchEvaluator::setMatchEvaluatorCallback (typename \fBMatchEvaluatorCallback\fP< void *, void *, void *>::Callback mef)\fC [inline]\fP"

.PP
Member function to set a callback function with no vector reference\&. 
.PP
\fBParameters:\fP
.RS 4
\fImef\fP Callback function\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A reference to the calling \fBMatchEvaluator\fP object\&. 
.RE
.PP

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBMatchEvaluator\fP& \fBjpcre2::select\fP< Char_T, BS >::MatchEvaluator::setMatchEvaluatorCallback (typename \fBMatchEvaluatorCallback\fP< const \fBNumSub\fP &, void *, void *>::Callback mef)\fC [inline]\fP"

.PP
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. \&.\&.\&. Sets a callback function with a \fBjp::NumSub\fP vector\&. You will be working with a constant reference to the vector\&. 
.PP
\fBParameters:\fP
.RS 4
\fImef\fP Callback function\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A reference to the calling \fBMatchEvaluator\fP object\&. 
.RE
.PP

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBMatchEvaluator\fP& \fBjpcre2::select\fP< Char_T, BS >::MatchEvaluator::setMatchEvaluatorCallback (typename \fBMatchEvaluatorCallback\fP< const \fBNumSub\fP &, const \fBMapNas\fP &, void *>::Callback mef)\fC [inline]\fP"

.PP
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. \&.\&.\&. Sets a callback function with a \fBjp::NumSub\fP and \fBjp::MapNas\fP\&. You will be working with constant references of the vectors\&. For maps, you won't be able to use \fC[]\fP operator on constant reference, use at() instead: 
.PP
.nf
map_nas["word"]; //wrong
map_nas\&.at("word"); //ok 

.fi
.PP
 If you want to use \fC[]\fP operator with maps, make a copy: 
.PP
.nf
jp::MapNas mn = map_nas;
mn["word"]; //ok

.fi
.PP
 
.PP
\fBParameters:\fP
.RS 4
\fImef\fP Callback function\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A reference to the calling \fBMatchEvaluator\fP object\&. 
.RE
.PP

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBMatchEvaluator\fP& \fBjpcre2::select\fP< Char_T, BS >::MatchEvaluator::setMatchEvaluatorCallback (typename \fBMatchEvaluatorCallback\fP< const \fBNumSub\fP &, void *, const \fBMapNtN\fP &>::Callback mef)\fC [inline]\fP"

.PP
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. \&.\&.\&. Sets a callback function with a \fBjp::NumSub\fP and \fBjp::MapNtN\fP\&. You will be working with constant references of the vectors\&. For maps, you won't be able to use \fC[]\fP operator on constant reference, use at() instead: 
.PP
.nf
map_ntn["word"]; //wrong
map_ntn\&.at("word"); //ok 

.fi
.PP
 If you want to use \fC[]\fP operator with maps, make a copy: 
.PP
.nf
jp::MapNtN mn = map_ntn;
mn["word"]; //ok

.fi
.PP
 
.PP
\fBParameters:\fP
.RS 4
\fImef\fP Callback function\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A reference to the calling \fBMatchEvaluator\fP object\&. 
.RE
.PP

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBMatchEvaluator\fP& \fBjpcre2::select\fP< Char_T, BS >::MatchEvaluator::setMatchEvaluatorCallback (typename \fBMatchEvaluatorCallback\fP< const \fBNumSub\fP &, const \fBMapNas\fP &, const \fBMapNtN\fP &>::Callback mef)\fC [inline]\fP"

.PP
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. \&.\&.\&. Sets a callback function with a \fBjp::NumSub\fP, \fBjp::MapNas\fP, \fBjp::MapNtN\fP\&. You will be working with constant references of the vectors\&. For maps, you won't be able to use \fC[]\fP operator on constant reference, use at() instead: 
.PP
.nf
map_nas["word"]; //wrong
map_nas\&.at("word"); //ok 

.fi
.PP
 If you want to use \fC[]\fP operator with maps, make a copy: 
.PP
.nf
jp::MapNas mn = map_nas;
mn["word"]; //ok

.fi
.PP
 
.PP
\fBParameters:\fP
.RS 4
\fImef\fP Callback function\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A reference to the calling \fBMatchEvaluator\fP object\&. 
.RE
.PP

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBMatchEvaluator\fP& \fBjpcre2::select\fP< Char_T, BS >::MatchEvaluator::setMatchEvaluatorCallback (typename \fBMatchEvaluatorCallback\fP< void *, const \fBMapNas\fP &, void *>::Callback mef)\fC [inline]\fP"

.PP
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. \&.\&.\&. Sets a callback function with a \fBjp::MapNas\fP\&. You will be working with constant reference of the vector\&. For maps, you won't be able to use \fC[]\fP operator on constant reference, use at() instead: 
.PP
.nf
map_nas["word"]; //wrong
map_nas\&.at("word"); //ok 

.fi
.PP
 If you want to use \fC[]\fP operator with maps, make a copy: 
.PP
.nf
jp::MapNas mn = map_nas;
mn["word"]; //ok

.fi
.PP
 
.PP
\fBParameters:\fP
.RS 4
\fImef\fP Callback function\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A reference to the calling \fBMatchEvaluator\fP object\&. 
.RE
.PP

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBMatchEvaluator\fP& \fBjpcre2::select\fP< Char_T, BS >::MatchEvaluator::setMatchEvaluatorCallback (typename \fBMatchEvaluatorCallback\fP< void *, const \fBMapNas\fP &, const \fBMapNtN\fP &>::Callback mef)\fC [inline]\fP"

.PP
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. \&.\&.\&. Sets a callback function with a \fBjp::MapNas\fP, \fBjp::MapNtN\fP\&. You will be working with constant reference of the vector\&. For maps, you won't be able to use \fC[]\fP operator on constant reference, use at() instead: 
.PP
.nf
map_nas["word"]; //wrong
map_nas\&.at("word"); //ok 

.fi
.PP
 If you want to use \fC[]\fP operator with maps, make a copy: 
.PP
.nf
jp::MapNas mn = map_nas;
mn["word"]; //ok

.fi
.PP
 
.PP
\fBParameters:\fP
.RS 4
\fImef\fP Callback function\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A reference to the calling \fBMatchEvaluator\fP object\&. 
.RE
.PP

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBMatchEvaluator\fP& \fBjpcre2::select\fP< Char_T, BS >::MatchEvaluator::setMatchEvaluatorCallback (typename \fBMatchEvaluatorCallback\fP< void *, void *, const \fBMapNtN\fP &>::Callback mef)\fC [inline]\fP"

.PP
This is an overloaded member function, provided for convenience\&. It differs from the above function only in what argument(s) it accepts\&. \&.\&.\&. Sets a callback function with a \fBjp::MapNtN\fP\&. You will be working with constant references of the vectors\&. For maps, you won't be able to use \fC[]\fP operator on constant reference, use at() instead: 
.PP
.nf
map_ntn["word"]; //wrong
map_ntn\&.at("word"); //ok 

.fi
.PP
 If you want to use \fC[]\fP operator with maps, make a copy: 
.PP
.nf
jp::MapNtN mn = map_ntn;
mn["word"]; //ok

.fi
.PP
 
.PP
\fBParameters:\fP
.RS 4
\fImef\fP Callback function\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A reference to the calling \fBMatchEvaluator\fP object\&. 
.RE
.PP

.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBMatchEvaluator\fP& \fBjpcre2::select\fP< Char_T, BS >::MatchEvaluator::setModifier (const std::string & s)\fC [inline]\fP, \fC [virtual]\fP"

.PP
Call \fBRegexMatch::setModifier(const std::string &s)\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIs\fP modifier string\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A reference to the calling \fBMatchEvaluator\fP object\&. 
.RE
.PP

.PP
Reimplemented from \fBjpcre2::select< Char_T, BS >::RegexMatch\fP\&.
.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBMatchEvaluator\fP& \fBjpcre2::select\fP< Char_T, BS >::MatchEvaluator::setPcre2Option (\fBUint\fP x)\fC [inline]\fP, \fC [virtual]\fP"

.PP
Call \fBRegexMatch::setPcre2Option\fP (Uint x)\&. 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP PCRE2 option value\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A reference to the calling \fBMatchEvaluator\fP object\&. 
.RE
.PP

.PP
Reimplemented from \fBjpcre2::select< Char_T, BS >::RegexMatch\fP\&.
.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBMatchEvaluator\fP& \fBjpcre2::select\fP< Char_T, BS >::MatchEvaluator::setRegexObject (const \fBRegex\fP * r)\fC [inline]\fP, \fC [virtual]\fP"

.PP
Call RegexMatch::setRegexObject(r)\&. 
.PP
\fBParameters:\fP
.RS 4
\fIr\fP constant \fBRegex\fP object pointer 
.RE
.PP
\fBReturns:\fP
.RS 4
A reference to the calling \fBMatchEvaluator\fP object\&. 
.RE
.PP

.PP
Reimplemented from \fBjpcre2::select< Char_T, BS >::RegexMatch\fP\&.
.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBMatchEvaluator\fP& \fBjpcre2::select\fP< Char_T, BS >::MatchEvaluator::setStartOffset (PCRE2_SIZE offset)\fC [inline]\fP, \fC [virtual]\fP"

.PP
Call \fBRegexMatch::setStartOffset\fP (PCRE2_SIZE offset)\&. 
.PP
\fBParameters:\fP
.RS 4
\fIoffset\fP match start offset in the subject\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
A reference to the calling \fBMatchEvaluator\fP object\&. 
.RE
.PP

.PP
Reimplemented from \fBjpcre2::select< Char_T, BS >::RegexMatch\fP\&.
.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBMatchEvaluator\fP& \fBjpcre2::select\fP< Char_T, BS >::MatchEvaluator::setSubject (const \fBString\fP & s)\fC [inline]\fP, \fC [virtual]\fP"

.PP
Call \fBRegexMatch::setSubject(const String &s)\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIs\fP subject string 
.RE
.PP
\fBReturns:\fP
.RS 4
A reference to the calling \fBMatchEvaluator\fP object\&. 
.RE
.PP

.PP
Reimplemented from \fBjpcre2::select< Char_T, BS >::RegexMatch\fP\&.
.SS "template<typename Char_T, Ush BS = sizeof( Char_T ) * CHAR_BIT> \fBMatchEvaluator\fP& \fBjpcre2::select\fP< Char_T, BS >::MatchEvaluator::setSubject (const \fBString\fP * s)\fC [inline]\fP, \fC [virtual]\fP"

.PP
Call \fBRegexMatch::setSubject(const String *s)\fP\&. 
.PP
\fBParameters:\fP
.RS 4
\fIs\fP subject string 
.RE
.PP
\fBReturns:\fP
.RS 4
A reference to the calling \fBMatchEvaluator\fP object\&. 
.RE
.PP

.PP
Reimplemented from \fBjpcre2::select< Char_T, BS >::RegexMatch\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for JPCRE2 from the source code\&.
